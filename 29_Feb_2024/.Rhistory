ggplot(counts, aes(x = epiweek)) +
geom_line(aes(y = case)) +
geom_line(aes(y = ma_4wk), colour = "red")
```{r}
# The example dataset used in this section is weekly counts of campylobacter cases reported in Germany between 2001 and 2011.
counts <- rio::import("campylobacter_germany.xlsx")
# Clean data
typeof(counts$date)
typeof(counts$case)
## ensure the date column is in the appropriate format
counts$date <- as.Date(counts$date)
## create a calendar week variable
## fitting ISO definitons of weeks starting on a monday
counts <- counts %>%
mutate(epiweek = yearweek(date, week_start = 1))
pacman::p_load(tidyverse)
# Clean data
typeof(counts$date)
typeof(counts$case)
## ensure the date column is in the appropriate format
counts$date <- as.Date(counts$date)
## create a calendar week variable
## fitting ISO definitons of weeks starting on a monday
counts <- counts %>%
mutate(epiweek = yearweek(date, week_start = 1))
pacman::p_load(tidyverse,tsibble)
# Clean data
typeof(counts$date)
typeof(counts$case)
## ensure the date column is in the appropriate format
counts$date <- as.Date(counts$date)
## create a calendar week variable
## fitting ISO definitons of weeks starting on a monday
counts <- counts %>%
mutate(epiweek = yearweek(date, week_start = 1))
## define time series object
counts <- tsibble(counts, index = epiweek)
## plot a line graph of cases by week
ggplot(counts, aes(x = epiweek, y = case)) +
geom_line()
## create a variable with missings instead of weeks with reporting issues
counts <- counts %>%
mutate(case_miss = if_else(
## if epiweek contains 52, 53, 1 or 2
str_detect(epiweek, "W51|W52|W53|W01|W02"),
## then set to missing
NA_real_,
## otherwise keep the value in case
case
))
## alternatively interpolate missings by linear trend
## between two nearest adjacent points
counts <- counts %>%
mutate(case_int = imputeTS::na_interpolation(case_miss)
)
## to check what values have been imputed compared to the original
ggplot_na_imputations(counts$case_miss, counts$case_int) +
## make a traditional plot (with black axes and white background)
theme_classic()
pacman::p_load(ggplot2)
## create a variable with missings instead of weeks with reporting issues
counts <- counts %>%
mutate(case_miss = if_else(
## if epiweek contains 52, 53, 1 or 2
str_detect(epiweek, "W51|W52|W53|W01|W02"),
## then set to missing
NA_real_,
## otherwise keep the value in case
case
))
## alternatively interpolate missings by linear trend
## between two nearest adjacent points
counts <- counts %>%
mutate(case_int = imputeTS::na_interpolation(case_miss)
)
## to check what values have been imputed compared to the original
ggplot_na_imputations(counts$case_miss, counts$case_int) +
## make a traditional plot (with black axes and white background)
theme_classic()
pacman::p_load(imputeTS)
## create a variable with missings instead of weeks with reporting issues
counts <- counts %>%
mutate(case_miss = if_else(
## if epiweek contains 52, 53, 1 or 2
str_detect(epiweek, "W51|W52|W53|W01|W02"),
## then set to missing
NA_real_,
## otherwise keep the value in case
case
))
## alternatively interpolate missings by linear trend
## between two nearest adjacent points
counts <- counts %>%
mutate(case_int = imputeTS::na_interpolation(case_miss)
)
## to check what values have been imputed compared to the original
ggplot_na_imputations(counts$case_miss, counts$case_int) +
## make a traditional plot (with black axes and white background)
theme_classic()
## create a moving average variable (deals with missings)
counts <- counts %>%
## create the ma_4w variable
## slide over each row of the case variable
mutate(ma_4wk = slider::slide_dbl(case,
## for each row calculate the name
~ mean(.x, na.rm = TRUE),
## use the four previous weeks
.before = 4))
## make a quick visualisation of the difference
ggplot(counts, aes(x = epiweek)) +
geom_line(aes(y = case)) +
geom_line(aes(y = ma_4wk), colour = "red")
## Function arguments
#####################
## x is a dataset
## counts is variable with count data or rates within x
## start_week is the first week in your dataset
## period is how many units in a year
## output is whether you want return spectral periodogram or the peak weeks
## "periodogram" or "weeks"
# Define function
periodogram <- function(x,
counts,
start_week = c(2002, 1),
period = 52,
output = "weeks") {
## make sure is not a tsibble, filter to project and only keep columns of interest
prepare_data <- dplyr::as_tibble(x)
# prepare_data <- prepare_data[prepare_data[[strata]] == j, ]
prepare_data <- dplyr::select(prepare_data, {{counts}})
## create an intermediate "zoo" time series to be able to use with spec.pgram
zoo_cases <- zoo::zooreg(prepare_data,
start = start_week, frequency = period)
## get a spectral periodogram not using fast fourier transform
periodo <- spec.pgram(zoo_cases, fast = FALSE, plot = FALSE)
## return the peak weeks
periodo_weeks <- 1 / periodo$freq[order(-periodo$spec)] * period
if (output == "weeks") {
periodo_weeks
} else {
periodo
}
}
## get spectral periodogram for extracting weeks with the highest frequencies
## (checking of seasonality)
periodo <- periodogram(counts,
case_int,
start_week = c(2002, 1),
output = "periodogram")
## pull spectrum and frequence in to a dataframe for plotting
periodo <- data.frame(periodo$freq, periodo$spec)
## plot a periodogram showing the most frequently occuring periodicity
ggplot(data = periodo,
aes(x = 1/(periodo.freq/52),  y = log(periodo.spec))) +
geom_line() +
labs(x = "Period (Weeks)", y = "Log(density)")
## get a vector weeks in ascending order
peak_weeks <- periodogram(counts,
case_int,
start_week = c(2002, 1),
output = "weeks")
## decompose the counts dataset
counts %>%
# using an additive classical decomposition model
model(classical_decomposition(case_int, type = "additive")) %>%
## extract the important information from the model
components() %>%
## generate a plot
autoplot()
pacman::p_load(feasts)
## decompose the counts dataset
counts %>%
# using an additive classical decomposition model
model(classical_decomposition(case_int, type = "additive")) %>%
## extract the important information from the model
components() %>%
## generate a plot
autoplot()
## define start date (when observations began)
start_date <- min(counts$epiweek)
## define a cut-off week (end of baseline, start of prediction period)
cut_off <- yearweek("2010-12-31")
## define the last date interested in (i.e. end of prediction)
end_date <- yearweek("2011-12-31")
## find how many weeks in period (year) of interest
num_weeks <- as.numeric(end_date - cut_off)
## add in missing weeks till end of year
counts <- counts %>%
## group by the region
group_by_key() %>%
## for each group add rows from the highest epiweek to the end of year
group_modify(~add_row(.,
epiweek = seq(max(.$epiweek) + 1,
end_date,
by = 1)))
pacman::p_load(forecast)
## add in fourier terms using the epiweek and case_int variabless
counts$fourier <- select(counts, epiweek, case_int) %>%
fourier(K = 1)
View(counts)
## define the model you want to fit (negative binomial)
model <- glm_nb_model(
## set number of cases as outcome of interest
case_int ~
## use epiweek to account for the trend
epiweek +
## use the fourier terms to account for seasonality
fourier)
pacman::p_load(forecast,trending)
## add in fourier terms using the epiweek and case_int variabless
counts$fourier <- select(counts, epiweek, case_int) %>%
fourier(K = 1)
pacman::p_load(forecast,trending)
## add in fourier terms using the epiweek and case_int variabless
counts$fourier <- select(counts, epiweek, case_int) %>%
fourier(K = 1)
## define the model you want to fit (negative binomial)
model <- glm_nb_model(
## set number of cases as outcome of interest
case_int ~
## use epiweek to account for the trend
epiweek +
## use the fourier terms to account for seasonality
fourier)
## fit your model using the counts dataset
fitted_model <- trending::fit(model, data.frame(counts))
## calculate confidence intervals and prediction intervals
observed <- predict(fitted_model, simulate_pi = FALSE)
estimate_res <- data.frame(observed$result)
## plot your regression
ggplot(data = estimate_res, aes(x = epiweek)) +
## add in a line for the model estimate
geom_line(aes(y = estimate),
col = "Red") +
## add in a band for the prediction intervals
geom_ribbon(aes(ymin = lower_pi,
ymax = upper_pi),
alpha = 0.25) +
## add in a line for your observed case counts
geom_line(aes(y = case_int),
col = "black") +
## make a traditional plot (with black axes and white background)
theme_classic()
## are the residuals fairly constant over time (if not: outbreaks? change in practice?)
estimate_res %>%
ggplot(aes(x = epiweek, y = resid)) +
geom_line() +
geom_point() +
labs(x = "epiweek", y = "Residuals")
## calculate the residuals
estimate_res <- estimate_res %>%
mutate(resid = fitted_model$result[[1]]$residuals)
## are the residuals fairly constant over time (if not: outbreaks? change in practice?)
estimate_res %>%
ggplot(aes(x = epiweek, y = resid)) +
geom_line() +
geom_point() +
labs(x = "epiweek", y = "Residuals")
## is there autocorelation in the residuals (is there a pattern to the error?)
estimate_res %>%
as_tsibble(index = epiweek) %>%
ACF(resid, lag_max = 52) %>%
autoplot()
## is there autocorelation in the residuals (is there a pattern to the error?)
estimate_res %>%
as_tsibble(index = epiweek) %>%
ACF(resid, lag_max = 52) %>%
autoplot()
## are residuals normally distributed (are under or over estimating?)
estimate_res %>%
ggplot(aes(x = resid)) +
geom_histogram(binwidth = 100) +
geom_rug() +
labs(y = "count")
## compare observed counts to their residuals
## should also be no pattern
estimate_res %>%
ggplot(aes(x = estimate, y = resid)) +
geom_point() +
labs(x = "Fitted", y = "Residuals")
## formally test autocorrelation of the residuals
## H0 is that residuals are from a white-noise series (i.e. random)
## test for independence
## if p value significant then non-random
Box.test(estimate_res$resid, type = "Ljung-Box")
## define start date (when observations began)
start_date <- min(counts$epiweek)
## define a cut-off week (end of baseline, start of prediction period)
cut_off <- yearweek("2010-12-31")
## define the last date interested in (i.e. end of prediction)
end_date <- yearweek("2011-12-31")
## find how many weeks in period (year) of interest
num_weeks <- as.numeric(end_date - cut_off)
## define start date (when observations began)
start_date <- min(counts$epiweek)
## define a cut-off week (end of baseline, start of prediction period)
cut_off <- yearweek("2010-12-31")
## define the last date interested in (i.e. end of prediction)
end_date <- yearweek("2011-12-31")
## find how many weeks in period (year) of interest
num_weeks <- as.numeric(end_date - cut_off)
## add in missing weeks till end of year
counts <- counts %>%
## group by the region
group_by_key() %>%
## for each group add rows from the highest epiweek to the end of year
group_modify(~add_row(.,
epiweek = seq(max(.$epiweek) + 1,
end_date,
by = 1)))
## define start date (when observations began)
start_date <- min(counts$epiweek)
## define a cut-off week (end of baseline, start of prediction period)
cut_off <- yearweek("2010-12-31")
## define the last date interested in (i.e. end of prediction)
end_date <- yearweek("2011-12-31")
## find how many weeks in period (year) of interest
num_weeks <- as.numeric(end_date - cut_off)
## add in missing weeks till end of year
counts <- counts %>%
## group by the region
group_by_key() %>%
## for each group add rows from the highest epiweek to the end of year
group_modify(~add_row(.,
epiweek = seq(max(.$epiweek) + 1,
end_date,
by = 1)))
pacman::p_load(rio)
pacman::p_load(rio)
library(readxl)
campylobacter_germany <- read_excel("R_training/29Feb2024/campylobacter_germany.xlsx")
setwd("~/R_training/29Feb2024")
library(readxl)
campylobacter_germany <- read_excel("campylobacter_germany.xlsx")
View(campylobacter_germany)
library(readxl)
counts <- read_excel("campylobacter_germany.xlsx")
View(campylobacter_germany)
library(readxl)
counts <- read_excel("campylobacter_germany.xlsx")
counts$date
typeof(counts$date)
typeof(counts$case)
as.Date(counts$date)
typeof(as.Date(counts$date))
counts$date <- as.Date(counts$date)
View(counts)
counts$date <- as.Date(counts$date)
pacman::p_load(tsibble)
tsibble
counts$date <- as.Date(counts$date)
pacman::p_load(tsibble)
help(tsibble)
tsibble(counts)
counts_ts <- tsibble(counts)
View(counts_ts)
type(counts_ts)
typeof(counts_ts)
class(counts_ts)
pacman::p_load(tidyverse)
yearweek(date)
yearweek(counts$date)
counts$epiweek <- yearweek(counts$date,week_start = 1)
counts_ts <- tsibble(counts)
counts_ts <- tsibble(counts,index=epiweek)
pacman::p_load(tidyverse)
# %>%
pacman::p_load(ggplot2)
pacman::p_load(ggplot2)
ggplot(counts,aes(x=epiweek,y=case))
ggplot(counts,aes(x=epiweek,y=case))
+ geom_line()
ggplot(counts_ts,aes(x=epiweek,y=case))
+ geom_line()
View(counts_ts)
pacman::p_load(tidyverse)
library(readxl)
counts <- read_excel("campylobacter_germany.xlsx")
counts$date <- as.Date(counts$date)
pacman::p_load(tsibble)
help(tsibble)
counts$epiweek <- yearweek(counts$date,week_start = 1)
counts_ts <- tsibble(counts,index=epiweek)
counts_ts <- tsibble(counts,index=epiweek)
pacman::p_load(ggplot2)
ggplot(counts_ts,aes(x=epiweek,y=case))
+ geom_line()
ggplot(counts_ts,aes(x=epiweek,y=case)) + geom_line()
ggplot(counts_ts,aes(x=epiweek,y=case)) +
geom_line()
# duplicates and missing values
# duplicates and missing values
counts %>% str_detect(epiweek, "W51")
# duplicates and missing values
counts_ts %>% str_detect(epiweek, "W51")
# duplicates and missing values
str_detect(counts_ts$epiweek, "W51")
# duplicates and missing values
str_detect(counts_ts$epiweek, "W51|W52|W53|W01|W02")
# duplicates and missing values
counts_ts$case_miss <- str_detect(counts_ts$epiweek, "W51|W52|W53|W01|W02")
if_else(counts_ts$case_miss,NA_real_,case)
if_else(counts_ts$case_miss,NA_real_,counts_ts$case)
case_interpolated <- if_else(counts_ts$case_miss,NA_real_,counts_ts$case)
counts_ts$case_interpolated <- if_else(counts_ts$case_miss,NA_real_,counts_ts$case)
pacman::p_load(imputeTS)
ggplot(counts_ts,aes(x=epiweek,y=case_interpolated)) +
geom_line()
imputeTS::na_interpolation(counts_ts$case_interpolated)
case_interpolated <- imputeTS::na_interpolation(counts_ts$case_interpolated)
counts_ts$case_interpolated <- imputeTS::na_interpolation(counts_ts$case_interpolated)
ggplot(counts_ts,aes(x=epiweek,y=case_interpolated)) +
geom_line()
# moving average
pacman::p_load(slider)
# moving average
pacman::p_load(slider)
slider::slide_dbl
# moving average
pacman::p_load(slider)
help(slider::slide_dbl)
# moving average
pacman::p_load(slider)
help(slide_dbl)
# moving average
pacman::p_load(slider)
help(slide_dbl)
slide_dbl(counts_ts$case_interpolated)
# moving average
pacman::p_load(slider)
help(slide_dbl)
slide_dbl(counts_ts$case_interpolated,mean)
# moving average
pacman::p_load(slider)
help(slide_dbl)
counts_ts$ma <- slide_dbl(counts_ts$case_interpolated,mean)
ggplot(counts_ts,aes(x=epiweek,y=case_interpolated)) +
geom_line()
# moving average
pacman::p_load(slider)
help(slide_dbl)
counts_ts$ma <- slide_dbl(counts_ts$case_interpolated,mean,.before=2)
ggplot(counts_ts,aes(x=epiweek,y=case_interpolated)) +
geom_line()
# moving average
pacman::p_load(slider)
help(slide_dbl)
counts_ts$ma <- slide_dbl(counts_ts$case_interpolated,mean,.before=4)
ggplot(counts_ts,aes(x=epiweek,y=case_interpolated)) +
geom_line()
ggplot(counts_ts,aes(x=epiweek,y=ma)) +
geom_line()
# moving average
pacman::p_load(slider)
help(slide_dbl)
counts_ts$ma <- slide_dbl(counts_ts$case_interpolated,mean,.before=2)
ggplot(counts_ts,aes(x=epiweek,y=ma)) +
geom_line()
# moving average
pacman::p_load(slider)
help(slide_dbl)
counts_ts$ma <- slide_dbl(counts_ts$case_interpolated,mean,.before=3)
ggplot(counts_ts,aes(x=epiweek,y=ma)) +
geom_line()
# moving average
pacman::p_load(slider)
help(slide_dbl)
counts_ts$ma <- slide_dbl(counts_ts$case_interpolated,mean,.before=4)
ggplot(counts_ts,aes(x=epiweek,y=ma)) +
geom_line()
# moving average
pacman::p_load(slider)
help(slide_dbl)
counts_ts$ma <- slide_dbl(counts_ts$case_interpolated,mean,.before=10)
ggplot(counts_ts,aes(x=epiweek,y=ma)) +
geom_line()
ggplot(counts_ts,aes(x=epiweek,y=case_interpolated)) +
geom_line()
ggplot(counts_ts,aes(x=epiweek,y=case_interpolated)) +
geom_line() +
geom_line(aes(y=ma))
ggplot(counts_ts,aes(x=epiweek)) +
geom_line(aes(y=case_interpolated)) +
geom_line(aes(y=ma))
ggplot(counts_ts,aes(x=epiweek)) +
geom_line(aes(y=case_interpolated)) +
geom_line(aes(y=ma),colour="red")
pacman::p_load(feasts)
pacman::p_load(feasts)
classical_decomposition(counts_ts$case_interpolated,type="additive")
pacman::p_load(feasts)
model(classical_decomposition(counts_ts$case_interpolated,type="additive"))
pacman::p_load(feasts)
model <- classical_decomposition(counts_ts$case_interpolated,type="additive")
model
components()
pacman::p_load(feasts)
counts_ts %>%
model(classical_decomposition(counts_ts$case_interpolated,type="additive"))
pacman::p_load(feasts)
counts_ts %>%
model(classical_decomposition(case_interpolated,type="additive"))
pacman::p_load(feasts)
counts_ts %>%
model(classical_decomposition(case_interpolated,type="additive")) %>%
components()
pacman::p_load(feasts)
counts_ts %>%
model(classical_decomposition(case_interpolated,type="additive")) %>%
components() %>%
autoplot()
help(autoplot)
