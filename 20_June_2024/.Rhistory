t.test(data=linelist_cleaned,age_years~gender)
```
t.test(data=linelist_cleaned,age_years~gender)
# Test whether data is normally distributed
# Shapiro-Wilk Test
shapiro.test(linelist$age_years)
# Test whether data is normally distributed
# Shapiro-Wilk Test
shapiro.test(linelist_cleaned$age_years)
# Testing whether two sampling distributions are the same
# Wilcoxon Rank Sum Test
wilcox.test(age_years ~ outcome)
# Testing whether two sampling distributions are the same
# Wilcoxon Rank Sum Test
wilcox.test(age_years ~ outcome,data=cleaned_linelist)
# Testing whether two sampling distributions are the same
# Wilcoxon Rank Sum Test
wilcox.test(age_years ~ outcome,data=linelist_cleaned)
# Testing whether two sampling distributions are the same
# Wilcoxon Rank Sum Test
wilcox.test(age_years ~ gender,data=linelist_cleaned)
# Testing whether two sampling distributions are the same
# Wilcoxon Rank Sum Test
wilcox.test(age_years ~ outcome,data=linelist_cleaned)
idx <- linelist_cleaned$outcome == 'Death'
male_linelist <- linelist_cleaned[idx,]
idx <- linelist_cleaned$outcome == 'Recover'
female_linelist <- linelist_cleaned[idx,]
library(ggplot2)
ggplot() + geom_histogram(data=female_linelist,aes(x=age_years),color='red',fill='white',alpha=0.1)+ geom_histogram(data=male_linelist,aes(x=age_years),color='blue',fill='white',alpha=0.1)
wilcox.test(age_years ~ outcome,data=linelist_cleaned)
t.test(data=linelist_cleaned,age_years~outcome)
male_linelist <- linelist_cleaned[idx,]
idx <- linelist_cleaned$outcome == 'Recover'
female_linelist <- linelist_cleaned[idx,]
library(ggplot2)
ggplot() + geom_histogram(data=female_linelist,aes(x=age_years),color='red',fill='white',alpha=0.1)+ geom_histogram(data=male_linelist,aes(x=age_years),color='blue',fill='white',alpha=0.1)
# Testing whether two sampling distributions are the same
# Wilcoxon Rank Sum Test
idx <- linelist_cleaned$outcome == 'Death'
male_linelist <- linelist_cleaned[idx,]
idx <- linelist_cleaned$outcome == 'Recover'
female_linelist <- linelist_cleaned[idx,]
library(ggplot2)
ggplot() + geom_histogram(data=female_linelist,aes(x=age_years),color='red',fill='white',alpha=0.1)+ geom_histogram(data=male_linelist,aes(x=age_years),color='blue',fill='white',alpha=0.1)
wilcox.test(age_years ~ outcome,data=linelist_cleaned)
t.test(data=linelist_cleaned,age_years~outcome)
# Testing whether two sampling distributions are the same
# Wilcoxon Rank Sum Test
idx <- linelist_cleaned$outcome x== 'Death'
idx <- linelist_cleaned$outcome == 'Recover'
female_linelist <- linelist_cleaned[idx,]
library(ggplot2)
ggplot() + geom_histogram(data=female_linelist,aes(x=age_years),color='red',fill='white',alpha=0.1)+ geom_histogram(data=male_linelist,aes(x=age_years),color='blue',fill='white',alpha=0.1)
ggplot() + geom_histogram(data=female_linelist,aes(x=age_years),color='red',fill='white',alpha=0.1)+ geom_histogram(data=male_linelist,aes(x=age_years),color='blue',fill='white',alpha=0.1,bins=50
)
ggplot() + geom_histogram(data=female_linelist,aes(x=age_years),color='red',fill='white',alpha=0.1)+ geom_histogram(data=male_linelist,aes(x=age_years),color='blue',fill='white',alpha=0.1,bins=50)
ggplot() + geom_histogram(data=female_linelist,aes(x=age_years),color='red',fill='white',alpha=0.1,bins=50)+ geom_histogram(data=male_linelist,aes(x=age_years),color='blue',fill='white',alpha=0.1,bins=50)
linelist_cleaned
female_linelist
female_linelist.dropna()
dropna(female_linelist)
drop_na(female_linelist)
library(tidyverse)
drop_na(female_linelist$outcome)
is.na(female_linelist$outcome)
drop.na(female_linelist$outcome)
drop_na(female_linelist$outcome)
is.na(female_linelist$outcome)
~is.na(female_linelist$outcome)
~is.na(female_linelist$outcome)
!is.na(female_linelist$outcome)
female_linelist[!is.na(female_linelist$outcome),]
idx <- linelist_cleaned$outcome == 'Death'
male_linelist <- linelist_cleaned[idx,]
male_linelist <- male_linelist[!is.na(male_linelist$outcome),]
idx <- linelist_cleaned$outcome == 'Recover'
female_linelist <- linelist_cleaned[idx,]
female_linelist <- female_linelist[!is.na(female_linelist$outcome),]
library(ggplot2)
ggplot() + geom_histogram(data=female_linelist,aes(x=age_years),color='red',fill='white',alpha=0.1,bins=50)+ geom_histogram(data=male_linelist,aes(x=age_years),color='blue',fill='white',alpha=0.1,bins=50)
# Testing whether two sampling distributions are the same
# Wilcoxon Rank Sum Test
idx <- linelist_cleaned$outcome == 'Death'
male_linelist <- linelist_cleaned[idx,]
idx <- linelist_cleaned$outcome == 'Recover'
female_linelist <- linelist_cleaned[idx,]
library(ggplot2)
ggplot() + geom_histogram(data=female_linelist,aes(x=age_years),color='red',fill='white',alpha=0.1,bins=50)+ geom_histogram(data=male_linelist,aes(x=age_years),color='blue',fill='white',alpha=0.1,bins=50)
View(linelist_cleaned)
table(linelist_cleaned$outcome)
table(female_linelist$outcome)
table(male_linelist$outcome)
# Chi-square
# gender ~ outcome
chisq.test(linelist_cleaned$outcome,linelist$outcome)
# Chi-square
# gender ~ outcome
chisq.test(linelist_cleaned$outcome,linelist_cleaned$gender)
help("chisq.test")
# Chi-square
# gender ~ outcome
Xsq = chisq.test(linelist_cleaned$outcome,linelist_cleaned$gender)
Xsq$observed
Xsq
Xsq$expected
Xsq$residuals
Xsq$stdres
reticulate::repl_python()
yes
Yes
reticulate::repl_python()
reticulate::repl_python()
reticulate::repl_python()
install.packages('devtools')
devtools::install_github('HopkinsIDD/phylosamp')
pacman::p_load(
rio,             # import/export
here,            # relative file paths
tidyverse,       # general data management and visualization
ape,             # to import and export phylogenetic files
ggtree,          # to visualize phylogenetic files
treeio,          # to visualize phylogenetic files
ggnewscale)      # to add additional layers of color schemes
tree <- ape::read.tree("export.newick")
tree <- ape::read.tree("export.newick")
tree
ggtree(tree)
pacman::p_load(
rio,             # import/export
here,            # relative file paths
tidyverse,       # general data management and visualization
ape,             # to import and export phylogenetic files
ggtree,          # to visualize phylogenetic files
treeio,          # to visualize phylogenetic files
ggnewscale)      # to add additional layers of color schemes
install.Packages(BiocManager)
install.packages(BiocManager)
install.packages("BiocManager")
pacman::p_load(
rio,             # import/export
here,            # relative file paths
tidyverse,       # general data management and visualization
ape,             # to import and export phylogenetic files
ggtree,          # to visualize phylogenetic files
treeio,          # to visualize phylogenetic files
ggnewscale)      # to add additional layers of color schemes
tree <- ape::read.tree("export.newick")
tree
ggtree(tree)
ggtree(tree,  branch.length = "none")                   # simple linear tree with all tips aligned
ggtree(tree, layout="circular")                         # simple circular tree
ggtree(tree, layout="circular", branch.length = "none") # simple circular tree with all tips aligned
ggtree(tree, layout="circular", branch.length = "none") # simple circular tree with all tips aligned
tree <- ape::read.tree("export (1).newick")
ggtree(tree)
ggtree(tree,  branch.length = "none")                   # simple linear tree with all tips aligned
ggtree(tree, layout="circular")                         # simple circular tree
#remotes::install_github("reconverse/reportfactory") # alternative
```
# Install and load the latest version of the package from Github
pacman::p_load_current_gh("reconverse/reportfactory")
new_factory()
ggplot(data=linelist_cleaned) + geom_histogram(wt_kg)
library(ggplot2)
ggplot(data=linelist_cleaned) + geom_histogram(x=wt_kg)
linelist_cleaned <- read_excel("dev/R_training/reports/linelist_cleaned.xlsx")
library(ggplot2)
ggplot(data=linelist_cleaned) + geom_histogram(x=wt_kg)
library(readxl)
linelist_cleaned <- read_excel("dev/R_training/reports/linelist_cleaned.xlsx")
library(ggplot2)
ggplot(data=linelist_cleaned) + geom_histogram(x=wt_kg)
library(readxl)
linelist_cleaned <- read_excel("dev/R_training/reports/linelist_cleaned.xlsx")
linelist_cleaned <- read_excel("linelist_cleaned.xlsx")
library(ggplot2)
ggplot(data=linelist_cleaned) + geom_histogram(x=wt_kg)
View(linelist_cleaned)
ggplot(data=linelist_cleaned) + geom_histogram(aes(x=wt_kg))
summary(linelist_cleaned)
summary(linelist_cleaned)
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(dplyr)
library(readxl)
# Load the data
linelist_data <- read_excel("linelist_cleaned.xlsx")
# Convert date columns to Date format
date_columns <- c('date_infection', 'date_onset', 'date_hospitalisation', 'date_outcome')
linelist_data[date_columns] <- lapply(linelist_data[date_columns], as.Date)
# Preview the data
head(linelist_data)
ggplot(linelist_data, aes(x = age)) +
geom_histogram(binwidth = 5, fill = 'skyblue', color = 'black') +
labs(title = 'Age Distribution of Cases', x = 'Age', y = 'Frequency') +
theme_minimal()
ggplot(linelist_data, aes(x = date_onset)) +
geom_histogram(binwidth = 1, fill = 'orange', color = 'black') +
labs(title = 'Epidemic Curve', x = 'Date of Onset', y = 'Number of Cases') +
theme_minimal()
ggplot(linelist_data, aes(x = gender)) +
geom_bar(fill = 'lightgreen', color = 'black') +
labs(title = 'Gender Distribution of Cases', x = 'Gender', y = 'Count') +
theme_minimal()
symptoms <- linelist_data %>%
select(fever, cough, chills, aches, vomit) %>%
gather(key = "symptom", value = "presence") %>%
filter(presence == "yes")
symptoms <- linelist_data %>%
select(fever, cough, chills, aches, vomit) %>%
gather(key = "symptom", value = "presence") %>%
filter(presence == "yes")
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(dplyr)
library(readxl)
library(tidyr)
# Load the data
linelist_data <- read_excel("linelist_cleaned.xlsx")
# Convert date columns to Date format
date_columns <- c('date_infection', 'date_onset', 'date_hospitalisation', 'date_outcome')
linelist_data[date_columns] <- lapply(linelist_data[date_columns], as.Date)
# Preview the data
head(linelist_data)
# Load the data
linelist_data <- read_excel("linelist_cleaned.xlsx")
# Convert date columns to Date format
date_columns <- c('date_infection', 'date_onset', 'date_hospitalisation', 'date_outcome')
linelist_data[date_columns] <- lapply(linelist_data[date_columns], as.Date)
# Preview the data
head(linelist_data)
# Load the data
linelist_data <- read_excel("linelist_cleaned.xlsx")
# Convert date columns to Date format
date_columns <- c('date_infection', 'date_onset', 'date_hospitalisation', 'date_outcome')
linelist_data[date_columns] <- lapply(linelist_data[date_columns], as.Date)
# Preview the data
head(linelist_data)
ggplot(linelist_data, aes(x = age)) +
geom_histogram(binwidth = 5, fill = 'skyblue', color = 'black') +
labs(title = 'Age Distribution of Cases', x = 'Age', y = 'Frequency') +
theme_minimal()
ggplot(linelist_data, aes(x = date_onset)) +
geom_histogram(binwidth = 1, fill = 'orange', color = 'black') +
labs(title = 'Epidemic Curve', x = 'Date of Onset', y = 'Number of Cases') +
theme_minimal()
ggplot(linelist_data, aes(x = gender)) +
geom_bar(fill = 'lightgreen', color = 'black') +
labs(title = 'Gender Distribution of Cases', x = 'Gender', y = 'Count') +
theme_minimal()
symptoms <- linelist_data %>%
select(fever, cough, chills, aches, vomit) %>%
gather(key = "symptom", value = "presence") %>%
filter(presence == "yes")
ggplot(symptoms, aes(x = symptom)) +
geom_bar(fill = 'purple', color = 'black') +
labs(title = 'Symptom Analysis', x = 'Symptom', y = 'Count') +
theme_minimal()
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(dplyr)
library(readxl)
library(tidyr)
library(sf)
library(ggmap)
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(dplyr)
library(readxl)
library(tidyr)
library(sf)
library(ggmap)
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(dplyr)
library(readxl)
library(tidyr)
library(sf)
library(ggmap)
p_load(ggmap)
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(dplyr)
library(readxl)
library(tidyr)
library(sf)
p_load(ggmap)
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(dplyr)
library(readxl)
library(tidyr)
library(sf)
pacman::p_load(ggmap)
# Load the data
linelist_data <- read_excel("linelist_cleaned.xlsx")
# Convert date columns to Date format
date_columns <- c('date_infection', 'date_onset', 'date_hospitalisation', 'date_outcome')
linelist_data[date_columns] <- lapply(linelist_data[date_columns], as.Date)
# Preview the data
head(linelist_data)
# Assuming the dataset has 'latitude' and 'longitude' columns
if("latitude" %in% colnames(linelist_data) & "longitude" %in% colnames(linelist_data)) {
# Convert to sf object for spatial plotting
linelist_data_sf <- st_as_sf(linelist_data, coords = c("longitude", "latitude"), crs = 4326, remove = FALSE)
# Plot the geographic distribution
ggplot(data = linelist_data_sf) +
geom_sf(aes(geometry = geometry), color = 'red', size = 2) +
labs(title = 'Geographic Distribution of Cases') +
theme_minimal()
} else {
print("Geographic data (latitude and longitude) not available in the dataset.")
}
# Assuming the dataset has 'latitude' and 'longitude' columns
if("latitude" %in% colnames(linelist_data) & "longitude" %in% colnames(linelist_data)) {
# Convert to sf object for spatial plotting
linelist_data_sf <- st_as_sf(linelist_data, coords = c("longitude", "latitude"), crs = 4326, remove = FALSE)
# Plot the geographic distribution
ggplot(data = linelist_data_sf) +
geom_sf(aes(geometry = geometry), color = 'red', size = 2) +
labs(title = 'Geographic Distribution of Cases') +
theme_minimal()
} else {
print("Geographic data (latitude and longitude) not available in the dataset.")
}
# Assuming the dataset has 'latitude' and 'longitude' columns
if("lat" %in% colnames(linelist_data) & "lon" %in% colnames(linelist_data)) {
# Convert to sf object for spatial plotting
linelist_data_sf <- st_as_sf(linelist_data, coords = c("lon", "lat"), crs = 4326, remove = FALSE)
# Plot the geographic distribution
ggplot(data = linelist_data_sf) +
geom_sf(aes(geometry = geometry), color = 'red', size = 2) +
labs(title = 'Geographic Distribution of Cases') +
theme_minimal()
} else {
print("Geographic data (latitude and longitude) not available in the dataset.")
}
less18 <- linelist_cleaned %>%
filter(age <= 18) %>% nrow()
total <- linelist_cleaned %>% filter(!is.na(age)) %>% nrow()
less18prop <- round(less18/total*100,1)
# Load necessary libraries
library(ggplot2)
library(dplyr)
library(readxl)
library(tidyr)
library(sf)
library(ggmap)
# Load the data
linelist_data <- read_excel("linelist_cleaned.xlsx")
less18 <- linelist_data %>%
filter(age <= 18) %>% nrow()
total <- linelist_data %>% filter(!is.na(age)) %>% nrow()
less18prop <- round(less18/total*100,1)
# Load necessary libraries
library(ggplot2)
library(dplyr)
library(readxl)
library(tidyr)
library(sf)
library(ggmap)
library(lubridate)
# Load the data
linelist_data <- read_excel("linelist_cleaned.xlsx")
# Convert date columns to Date format
date_columns <- c('date_infection', 'date_onset', 'date_hospitalisation', 'date_outcome')
linelist_data[date_columns] <- lapply(linelist_data[date_columns], as.Date)
# Preview the data
head(linelist_data)
# Calculate additional metrics
linelist_data <- linelist_data %>%
mutate(
days_onset_hosp = as.numeric(date_hospitalisation - date_onset),
days_hosp_outcome = as.numeric(date_outcome - date_hospitalisation)
)
# Age Distribution
ggplot(linelist_data, aes(x = age)) +
geom_histogram(binwidth = 5, fill = 'skyblue', color = 'black') +
labs(title = 'Age Distribution of Cases', x = 'Age', y = 'Frequency') +
theme_minimal()
View(linelist_data)
pacman::p_load(ggplot2,rio)
rio::import('linelist_cleaned.xlsx')
rio::import('linelist_cleaned.xlsx') %>% filter(hospital=params$hospital)
rio::import('linelist_cleaned.xlsx') %>% filter(hospital==params$hospital)
linelist_hospital <- rio::import('linelist_cleaned.xlsx') %>% filter(hospital==params$hospital)
```{r data}
linelist_hospital <- rio::import('linelist_cleaned.xlsx') %>% filter(hospital==params$hospital)
linelist_hospital <- rio::import('linelist_cleaned.xlsx') %>% filter(hospital==params$hospital)
pacman::p_load(ggplot2,rio,dplyr)
linelist_hospital <- rio::import('linelist_cleaned.xlsx') %>% filter(hospital==params$hospital)
mean(linelist_hospital$age,drop.na=TRUE)
linelist_hospital$age
mean(linelist_hospital$age)
mean(linelist_hospital$age,na.rm=TRUE)
library(tidyr)
# Symptoms Analysis
symptoms <- linelist_hospital %>%
select(fever, cough, chills, aches, vomit) %>%
pivot_longer(cols = everything(), names_to = "symptom", values_to = "presence") %>%
filter(presence == "yes")
ggplot(symptoms, aes(x = symptom)) +
geom_bar(fill = 'purple', color = 'black') +
labs(title = 'Symptom Analysis', x = 'Symptom', y = 'Count') +
theme_minimal()
library(ape)
help(ape)
tree <- read.tree("strep_tree.newick")
plot.phylo(tree)
tree$tip.label
help(plot.phylo)
tip_colors <- rep("darkgreen",length(tree$tip.label))
tip_colors[7] <- "red"
plot.phylo(tree,type="phylogram",tip.color = tip_colors)
if (!requireNamespace("BiocManager", quietly=TRUE))
install.packages("BiocManager")
BiocManager::install("DECIPHER")
library("ape")
# Example sequences
sequences <- c("ATGCTAGCTAG", "ATGCGATGCA", "ATGCCGTA")
# Intro to Bioinformatics Day 2
-   4 "base pairs" ATCG
# Intro to Bioinformatics Day 2
-   4 "base pairs" ATCG
# Intro to Bioinformatics Day 2
-   4 "base pairs" ATCG
sequences
# Intro to Bioinformatics Day 2
-   4 "base pairs" ATCG
ls
library("ape")
library(msa)
# Example sequences
sequences <- c("ATGCTAGCTAG", "ATGCGATGCA", "ATGCCGTA")
# Intro to Bioinformatics Day 2
-   4 "base pairs" ATCG
# Intro to Bioinformatics Day 2
-   4 "base pairs" ATCG
# Intro to Bioinformatics Day 2
-   4 "base pairs" ATCG
# Intro to Bioinformatics Day 2
-   4 "base pairs" ATCG
# Intro to Bioinformatics Day 2
-   4 "base pairs" ATCG
# Intro to Bioinformatics Day 2
-   4 "base pairs" ATCG
# Intro to Bioinformatics Day 2
-   4 "base pairs" ATCG
# Intro to Bioinformatics Day 2
-   4 "base pairs" ATCG
# Intro to Bioinformatics Day 2
-   4 "base pairs" ATCG
# Intro to Bioinformatics Day 2
-   4 "base pairs" ATCG
# Intro to Bioinformatics Day 2
-   4 "base pairs" ATCG
library(Biostrings)
source("~/dev/R_training/20_June_2024/main.R", echo=TRUE)
DNAStringSet(sequences)
dna_sequences <- DNAStringSet(sequences)
dna_sequences
source("~/dev/R_training/20_June_2024/main.R", echo=TRUE)
# SNP
msa(inputSeqs=dna_sequences)
source("~/dev/R_training/20_June_2024/main.R", echo=TRUE)
alignment
source("~/dev/R_training/20_June_2024/main.R", echo=TRUE)
source("~/dev/R_training/20_June_2024/main.R", echo=TRUE)
source("~/dev/R_training/20_June_2024/main.R", echo=TRUE)
source("~/dev/R_training/20_June_2024/main.R", echo=TRUE)
source("~/dev/R_training/20_June_2024/main.R", echo=TRUE)
alignment
alignment[0]
type(alignment)
typeof(alignment)
alignment
as.matrix(alignment)
print(i)
for (i in 1:3){
print(i)
}
source("~/dev/R_training/20_June_2024/main.R", echo=TRUE)
source("~/dev/R_training/20_June_2024/main.R", echo=TRUE)
source("~/dev/R_training/20_June_2024/main.R", echo=TRUE)
source("~/dev/R_training/20_June_2024/main.R", echo=TRUE)
source("~/dev/R_training/20_June_2024/main.R", echo=TRUE)
source("~/dev/R_training/20_June_2024/main.R", echo=TRUE)
source("~/dev/R_training/20_June_2024/main.R", echo=TRUE)
source("~/dev/R_training/20_June_2024/main.R", echo=TRUE)
source("~/dev/R_training/20_June_2024/main.R", echo=TRUE)
source("~/dev/R_training/20_June_2024/main.R", echo=TRUE)
source("~/dev/R_training/20_June_2024/main.R", echo=TRUE)
source("~/dev/R_training/20_June_2024/main.R", echo=TRUE)
source("~/dev/R_training/20_June_2024/main.R", echo=TRUE)
source("~/dev/R_training/20_June_2024/main.R", echo=TRUE)
alignment
source("~/dev/R_training/20_June_2024/main.R", echo=TRUE)
setwd("~/dev/R_training/20_June_2024")
source("~/dev/R_training/20_June_2024/main.R", echo=TRUE)
alignment
ref_seq <- alignment_matrix[1,]
for (row_index in 1:2) {
dist <- 0
for (col_index in 1:29000) {
is_snp <- ref_seq[col_index] != alignment_matrix[row_index,col_index]
if (is_snp) {
dist <- dist + 1
}
}
print(dist)
}
