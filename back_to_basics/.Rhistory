mutate(tmp,hospital = str_trim(hospital))
library(stringr)
mutate(tmp,hospital = str_trim(hospital))
help(str_trim)
mutate(tmp,hospital = str_replace_all(hospital))
mutate(tmp,hospital = str_replace_all(hospital, " ",""))
a = "Andrew Smith The Third"
str_replace_all(a, pattern=" ", replacement = "oodle")
str_replace_all(a, pattern=" ", replacement = "")
mutate(tmp, hospital = tolower(gender))
mutate(tmp, hospital = tolower(hospital))
tmp <- mutate(tmp, hospital = tolower(hospital))
library(dplyr)
library(stringr)
tmp <- filter(linelist_cleaned, age_years > 50)
tmp <- tmp[c("case_id","date_hospitalisation","gender","age","hospital")]
tmp <- mutate(tmp,hospital = str_replace_all(hospital, " ",""))
tmp <- mutate(tmp, hospital = tolower(hospital))
library(dplyr)
library(stringr)
tmp <- filter(linelist_cleaned, age_years > 50)
tmp <- tmp[c("case_id","date_hospitalisation","gender","age","hospital")]
tmp <- mutate(tmp,hospital = str_replace_all(hospital, " ",""))
tmp <- mutate(tmp, hospital = tolower(hospital))
tmp
tmp.isna()
is.na(tmp)
tmp
na.omit(tmp)
tmp
values(tmp$gender)
unique(tmp$gender)
na.omit(tmp)
tmp
library(dplyr)
library(stringr)
data_cleaning_procedure <- function(linelist){
# data_cleaning_procedure is defined for linelists from DHEC
# written by Andrew Smith
# 7Dec2023
# parameters: linelist with columns "case_id","date_hospitalisation","gender","age","hospital"
tmp <- filter(linelist, age > 50)
tmp <- tmp[c("case_id","date_hospitalisation","gender","age","hospital")]
tmp <- mutate(tmp,hospital = str_replace_all(hospital, " ",""))
tmp <- mutate(tmp, hospital = tolower(hospital))
tmp <- na.omit(tmp)
return(tmp)
}
library(readxl)
linelist_cleaned <- read_excel("linelist_cleaned.xlsx")
data_cleaning_procedure(linelist_cleaned)
library(stringr)
library(dplyr)
library(stringr)
data_cleaning_procedure <- function(linelist){
# data_cleaning_procedure is defined for linelists from DHEC
# written by Andrew Smith
# 7Dec2023
# parameters: linelist with columns "case_id","date_hospitalisation","gender","age","hospital"
tmp <- filter(linelist, age > 50)
tmp <- tmp[c("case_id","date_hospitalisation","gender","age","hospital")]
tmp <- mutate(tmp,hospital = str_replace_all(hospital, " ",""))
tmp <- mutate(tmp, hospital = tolower(hospital))
tmp <- na.omit(tmp)
return(tmp)
}
source(utils.R)
source("utils.R")
source("utils.R")
library(readxl)
source("utils.R")
linelist <- read_excel("linelist_cleaned.xlsx")
data_cleaning_procedure(linelist)
# Ensures the package "pacman" is installed
if (!require("pacman")) install.packages("pacman")
# Ensures the package "pacman" is installed
if (!require("pacman")) install.packages("pacman")
# Ensures the package "pacman" is installed
if (!require("pacman")) install.packages("pacman")
# Ensures the package "pacman" is installed
if (!require("pacman")) install.packages("pacman")
# Ensures the package "pacman" is installed
if (!require("pacman")) install.packages("pacman")
# Ensures the package "pacman" is installed
if (!require("pacman")) install.packages("pacman")
# Ensures the package "pacman" is installed
if (!require("pacman")) install.packages("pacman")
pacman::p_load(
rio,        # importing data
here,       # relative file pathways
janitor,    # data cleaning and tables
lubridate,  # working with dates
matchmaker, # dictionary-based cleaning
epikit,     # age_categories() function
tidyverse   # data management and visualization
)
linelist_raw <- import("linelist_raw.xlsx")
linelist_raw <- import("../data/linelist_raw.xlsx")
setwd('/Users/andrew/R_training/back_to_basics')
linelist_raw <- import("../data/linelist_raw.xlsx")
linelist_raw <- import("data/linelist_raw.xlsx")
linelist_raw <- import("data/linelist_raw.xlsx")
View(linelist_raw)
names(linelist_raw)
# pipe the raw dataset through the function clean_names(), assign result as "linelist"
linelist <- linelist_raw %>%
janitor::clean_names()
# see the new column names
names(linelist)
pacman::p_load(
rio,          # file import/export
here,         # relative filepaths
lubridate,    # working with dates/epiweeks
aweek,        # alternative package for working with dates/epiweeks
incidence2,   # epicurves of linelist data
i2extras,     # supplement to incidence2
stringr,      # search and manipulate character strings
forcats,      # working with factors
RColorBrewer, # Color palettes from colorbrewer2.org
tidyverse     # data management + ggplot2 graphics
)
linelist <- import("linelist_cleaned.xlsx")
linelist <- import("data/linelist_cleaned.xlsx")
View(linelist)
# import the counts data into R
count_data <- linelist %>%
group_by(hospital, date_hospitalisation) %>%
summarize(n_cases = dplyr::n()) %>%
filter(date_hospitalisation > as.Date("2013-06-01")) %>%
ungroup()
View(count_data)
## set the report date for the report
## note: can be set to Sys.Date() for the current date
data_date <- as.Date("2015-05-15")
View(linelist)
View(linelist)
# Data Type, Casting
linelist$age_cat5 <- as.factor(linelist$age_cat5)
typeof(linelist$age_cat5)
ordered(linelist$age_cat5)
# Programming is creative - sometimes manual
linelist$age_cat5 <- factor(linelist$age_cat5,levels=c("0-4","5-9", "10-14", "15-19", "20-24", "25-29" ,"30-34", "35-39", "40-44","45-49" ,"50-54" ,"55-59", "60-64","65-69", "70-74" ,"75-79", "80-84"))
# Plotting
# install.packages("apyramid")
age_pyramid(linelist,"age_cat5","gender",proportional=TRUE,pal=c("#7D82B8","#613F75"))
# Programming is creative - sometimes manual
linelist$age_cat5 <- factor(linelist$age_cat5,levels=c("0-4","5-9", "10-14", "15-19", "20-24", "25-29" ,"30-34", "35-39", "40-44","45-49" ,"50-54" ,"55-59", "60-64","65-69", "70-74" ,"75-79", "80-84"))
# Plotting
# install.packages("apyramid")
age_pyramid(linelist,"age_cat5","gender",proportional=TRUE,pal=c("#7D82B8","#613F75"))
p_load(ggplot2,readxl,apyramid)
library(pacman)
p_load(ggplot2,readxl,apyramid)
# Plotting
# install.packages("apyramid")
age_pyramid(linelist,"age_cat5","gender",proportional=TRUE,pal=c("#7D82B8","#613F75"))
# linelist$age_months <- linelist$age_years * 12
mutate(linelist, age_months_tmp = age_years * 12)
library(dplyr)
# linelist$age_months <- linelist$age_years * 12
mutate(linelist, age_months_tmp = age_years * 12)
View(linelist_raw)
View(linelist)
import("linelist_cleaned.xlsx")
import("linelist_cleaned.xlsx")
library(readr)
import("linelist_cleaned.xlsx")
library(readr)
import("linelist_cleaned.xlsx")
library(readxl)
import("linelist_cleaned.xlsx")
library(readxl)
linelist_cleaned <- read_excel("R_training/back_to_basics/data/linelist_cleaned.xlsx")
library(readxl)
linelist_cleaned <- read_excel("/Users/andrew/R_training/back_to_basics/data/linelist_cleaned.xlsx")
View(linelist_cleaned)
library(readxl)
setwd("/Users/andrew/R_training/back_to_basics")
linelist_cleaned <- read_excel("data/linelist_cleaned.xlsx")
View(linelist_cleaned)
setwd("~/R_training/back_to_basics")
ggplot(data = linelist)
ggplot(data = linelist) +
geom_histogram(aes(x = date_onset))
View(linelist)
linelist
linelist %>% filter(hopsital == "Military Hospital")
linelist %>% filter(hospital == "Military Hospital")
linelist %>% filter(hospital == "Central Hospital")
linelist %>% filter(hospital == "Military Hospital")
military_data <- linelist %>% filter(hospital == "Military Hospital")
ggplot(data = military_data) +
geom_histogram(aes(x=date_onset))
ggplot(data = military_data) +
geom_histogram(aes(x=date_onset),binwidth = 1)
ggplot(data = military_data) +
geom_histogram(mapping=aes(x=date_onset),binwidth = 1)
ggplot(data = military_data) +
geom_histogram(mapping = aes(x=date_onset))
ggplot(data = military_data) +
geom_histogram(mapping = aes(x=date_onset), bins=30)
ggplot(data = military_data) +
geom_histogram(mapping = aes(x=date_onset), bins=5)
ggplot(data = military_data) +
geom_histogram(mapping = aes(x=date_onset), bins=100)
ggplot(data = military_data) +
geom_histogram(mapping = aes(x=date_onset), binwidth = 7)
ggplot(data = military_data) +          # set data
geom_histogram(                      # add histogram
mapping = aes(x = date_onset),     # map date column to x-axis
binwidth = 1)+                     # cases binned by 1 day
labs(title = "Central Hospital - Daily")
ggplot(data = military_data) +
geom_histogram(
mapping = aes(x = date_onset),
binwidth = 3)+
ggplot(data = military_data) +
geom_histogram(
mapping = aes(x = date_onset),
binwidth = 3)
ggplot(data = military_data) +
geom_histogram(
mapping = aes(x = date_onset),
binwidth = 30)
military_data
military_data$date_onset
class(military_data$date_onset)
class(military_data$date_onset)
as.Date(military_data$date_onset)
class(military_data$date_onset)
military_data$date_onset <- as.Date(military_data$date_onset)
ggplot(data = military_data) +
geom_histogram(
mapping = aes(x = date_onset),
binwidth = 1)
pacman::p_load(
rio,          # file import/export
here,         # relative filepaths
lubridate,    # working with dates/epiweeks
aweek,        # alternative package for working with dates/epiweeks
incidence2,   # epicurves of linelist data
i2extras,     # supplement to incidence2
stringr,      # search and manipulate character strings
forcats,      # working with factors
RColorBrewer, # Color palettes from colorbrewer2.org
tidyverse     # data management + ggplot2 graphics
)
linelist <- import("data/linelist_cleaned.xlsx")
# check range of onset dates
ggplot(data = linelist)+
geom_histogram(aes(x = date_onset))
# check range of onset dates
ggplot(data = linelist)+
geom_histogram(aes(x = date_onset), binwidth = 1)
# check range of onset dates
ggplot(data = linelist)+
geom_histogram(aes(x = date_onset), binwidth = 7)
linelist <- import("data/linelist_cleaned.xlsx")
linelist$date_onset <- as.Date(linelist$date_onset)
# check range of onset dates
ggplot(data = linelist)+
geom_histogram(aes(x = date_onset), binwidth = 7)
# check range of onset dates
ggplot(data = linelist)+
geom_histogram(aes(x = date_onset), binwidth = 1)
central_data <- linelist %>%
filter(hospital == "Central Hospital")
View(central_data)
# check range of onset dates
ggplot(data = central_data)+
geom_histogram(aes(x = date_onset), binwidth = 1)
# check range of onset dates
ggplot(data = central_data)+
geom_histogram(aes(x = date_onset), binwidth = 7)
# check range of onset dates
ggplot(data = central_data)+
geom_histogram(aes(x = date_onset), binwidth = 7) +
labs(title="Central Hospital - Weekly")
# check range of onset dates
ggplot(data = linelist)+
geom_histogram(
aes(x = date_onset),
binwidth = 1,
color="darkblue")
# check range of onset dates
ggplot(data = linelist)+
geom_histogram(
aes(x = date_onset),
binwidth = 7,
color="darkblue")
# check range of onset dates
ggplot(data = central_data)+
geom_histogram(
aes(x = date_onset),
binwidth = 7,
color="darkblue")
# check range of onset dates
ggplot(data = central_data)+
geom_histogram(
aes(x = date_onset),
binwidth = 7,
color="darkblue",
fill="lightblue")
# check range of onset dates
ggplot(data = central_data)+
geom_histogram(
aes(x = date_onset),
binwidth = 7,
color="darkblue",
fill="lightblue") +
labs(
title="Weekly Central Data",
x = "Week of Onset"
)
# check range of onset dates
ggplot(data = central_data)+
geom_histogram(
aes(x = date_onset),
binwidth = 7,
color="darkblue",
fill="lightblue") +
labs(
title="Weekly Central Data",
x = "Week of Onset",
y = "Count"
)
nrow(central_data)
#stringr::str_glue("{central_data}")
"{nrow(central_data)}"
#stringr::str_glue("{central_data}")
stringr::str_glue("{nrow(central_data)}")
#stringr::str_glue("{central_data}")
stringr::str_glue("n = {nrow(central_data)}")
#stringr::str_glue("{central_data}")
stringr::str_glue("n = {nrow(central_data)} andrew smith")
#stringr::str_glue("{central_data}")
hospital <- "Central Hospital"
stringr::str_glue("n = {nrow(central_data)} from {hospital}")
#stringr::str_glue("{central_data}")
hospital <- "Central Hospital"
hospital_data <- linelist %>%
filter(hospital == hospital)
View(hospital_data)
my_hospital <- "Central Hospital"
hospital_data <- linelist %>%
filter(hospital == my_hospital)
stringr::str_glue("n = {nrow(central_data)} from {hospital}")
#stringr::str_glue("{central_data}")
View(hospital_data)
my_hospital <- "Military Hospital"
hospital_data <- linelist %>%
filter(hospital == my_hospital)
stringr::str_glue("n = {nrow(central_data)} from {hospital}")
#stringr::str_glue("{central_data}")
my_hospital <- "Military Hospital"
hospital_data <- linelist %>%
filter(hospital == my_hospital)
stringr::str_glue("n = {nrow(central_data)} from {my_hospital}")
#stringr::str_glue("{central_data}")
my_hospital <- "Military Hospital"
hospital_data <- linelist %>%
filter(hospital == my_hospital)
stringr::str_glue("n = {nrow(hospital_data)} from {my_hospital}")
#stringr::str_glue("{central_data}")
my_hospital <- "Military Hospital"
hospital_data <- linelist %>%
filter(hospital == my_hospital)
stringr::str_glue("n = {nrow(hospital_data)} from {my_hospital}")
ggplot(data = hospital_data)+
geom_histogram(
aes(x = date_onset),
binwidth = 7,
color="darkblue",
fill="lightblue") +
labs(
title=stringr::str_glue("Weekly {my_hospital} Data"),
x = "Week of Onset",
y = "Count"
)
my_hospital <- "Central Hospital"
hospital_data <- linelist %>%
filter(hospital == my_hospital)
stringr::str_glue("n = {nrow(hospital_data)} from {my_hospital}")
ggplot(data = hospital_data)+
geom_histogram(
aes(x = date_onset),
binwidth = 7,
color="darkblue",
fill="lightblue") +
labs(
title=stringr::str_glue("Weekly {my_hospital} Data"),
x = "Week of Onset",
y = "Count"
)
my_hospital <- "Central Hospital"
hospital_data <- linelist %>%
filter(hospital == my_hospital)
ggplot(data = hospital_data)+
geom_histogram(
aes(x = date_onset),
binwidth = 7,
color="darkblue",
fill="lightblue") +
labs(
title=stringr::str_glue("Weekly {my_hospital} Data"),
x = "Week of Onset",
y = "Count",
caption = stringr::str_glue("n = {nrow(hospital_data)} from {my_hospital}")
)
hospital_data
hospital_data$date_onset
min(hospital_data$date_onset)
min(hospital_data$date_onset,na.rm=T)
min(hospital_data$date_onset,na.rm=T)
max(hospital_data$date_onset,na.rm=T)
my_hospital <- "Central Hospital"
hospital_data <- linelist %>%
filter(hospital == my_hospital)
ggplot(data = hospital_data)+
geom_histogram(
aes(x = date_onset),
binwidth = 7,
color="darkblue",
fill="lightblue") +
labs(
title=stringr::str_glue("Weekly {my_hospital} Data"),
x = "Week of Onset",
y = "Count",
caption = stringr::str_glue("n = {nrow(hospital_data)} from {my_hospital}; Case onsets range from {min(hospital_data$date_onset,na.rm=T)} to {max(hospital_data$date_onset,na.rm=T)}")
)
my_hospital <- "Military Hospital"
hospital_data <- linelist %>%
filter(hospital == my_hospital)
ggplot(data = hospital_data)+
geom_histogram(
aes(x = date_onset),
binwidth = 7,
color="darkblue",
fill="lightblue") +
labs(
title=stringr::str_glue("Weekly {my_hospital} Data"),
x = "Week of Onset",
y = "Count",
caption = stringr::str_glue("n = {nrow(hospital_data)} from {my_hospital}; Case onsets range from {min(hospital_data$date_onset,na.rm=T)} to {max(hospital_data$date_onset,na.rm=T)}")
)
my_hospital <- "Missing"
hospital_data <- linelist %>%
filter(hospital == my_hospital)
ggplot(data = hospital_data)+
geom_histogram(
aes(x = date_onset),
binwidth = 7,
color="darkblue",
fill="lightblue") +
labs(
title=stringr::str_glue("Weekly {my_hospital} Data"),
x = "Week of Onset",
y = "Count",
caption = stringr::str_glue("n = {nrow(hospital_data)} from {my_hospital}; Case onsets range from {min(hospital_data$date_onset,na.rm=T)} to {max(hospital_data$date_onset,na.rm=T)}")
)
my_hospital <- c("Military Hospital","Central Hospital")
hospital_data <- linelist %>%
filter(hospital == my_hospital)
ggplot(data = hospital_data)+
geom_histogram(
aes(x = date_onset),
binwidth = 7,
color="darkblue",
fill="lightblue") +
labs(
title=stringr::str_glue("Weekly {my_hospital} Data"),
x = "Week of Onset",
y = "Count",
caption = stringr::str_glue("n = {nrow(hospital_data)} from {my_hospital}; Case onsets range from {min(hospital_data$date_onset,na.rm=T)} to {max(hospital_data$date_onset,na.rm=T)}")
)
my_hospital <- "Central Hospital"
hospital_data <- linelist %>%
filter(hospital == my_hospital)
ggplot(data = hospital_data)+
geom_histogram(
aes(x = date_onset),
binwidth = 7,
color="darkblue",
fill="lightblue") +
labs(
title=stringr::str_glue("Weekly {my_hospital} Data"),
x = "Week of Onset",
y = "Count",
caption = stringr::str_glue("n = {nrow(hospital_data)} from {my_hospital}; Case onsets range from {min(hospital_data$date_onset,na.rm=T)} to {max(hospital_data$date_onset,na.rm=T)}")
)
max(hospital_data$date_onset,na.rm=T)
format(max(hospital_data$date_onset,na.rm=T),format='%a')
format(max(hospital_data$date_onset,na.rm=T),format='%a %d %b %Y')
my_hospital <- "Central Hospital"
hospital_data <- linelist %>%
filter(hospital == my_hospital)
ggplot(data = hospital_data)+
geom_histogram(
aes(x = date_onset),
binwidth = 7,
color="darkblue",
fill="lightblue") +
labs(
title=stringr::str_glue("Weekly {my_hospital} Data"),
x = "Week of Onset",
y = "Count",
caption = stringr::str_glue("n = {nrow(hospital_data)} from {my_hospital}; Case onsets range from {format(min(hospital_data$date_onset,na.rm=T),format='%a %d %b %Y')} to {format(max(hospital_data$date_onset,na.rm=T),format='%a %d %b %Y')}")
)
source("dhec_utils/utils.R")
plot_epicurve(linelist=linelist,my_hospital="Central Hospital")
source("dhec_utils/utils.R")
plot_epicurve(linelist=linelist,my_hospital="Central Hospital")
