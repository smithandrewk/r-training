zoo_cases <- zoo::zooreg(prepare_data,
start = start_week, frequency = period)
## get a spectral periodogram not using fast fourier transform
periodo <- spec.pgram(zoo_cases, fast = FALSE, plot = FALSE)
## return the peak weeks
periodo_weeks <- 1 / periodo$freq[order(-periodo$spec)] * period
if (output == "weeks") {
periodo_weeks
} else {
periodo
}
}
## get spectral periodogram for extracting weeks with the highest frequencies
## (checking of seasonality)
periodo <- periodogram(counts,
case_int,
start_week = c(2002, 1),
output = "periodogram")
## pull spectrum and frequence in to a dataframe for plotting
periodo <- data.frame(periodo$freq, periodo$spec)
## plot a periodogram showing the most frequently occuring periodicity
ggplot(data = periodo,
aes(x = 1/(periodo.freq/52),  y = log(periodo.spec))) +
geom_line() +
labs(x = "Period (Weeks)", y = "Log(density)")
## get a vector weeks in ascending order
peak_weeks <- periodogram(counts,
case_int,
start_week = c(2002, 1),
output = "weeks")
## decompose the counts dataset
counts %>%
# using an additive classical decomposition model
model(classical_decomposition(case_int, type = "additive")) %>%
## extract the important information from the model
components() %>%
## generate a plot
autoplot()
pacman::p_load(feasts)
## decompose the counts dataset
counts %>%
# using an additive classical decomposition model
model(classical_decomposition(case_int, type = "additive")) %>%
## extract the important information from the model
components() %>%
## generate a plot
autoplot()
## define start date (when observations began)
start_date <- min(counts$epiweek)
## define a cut-off week (end of baseline, start of prediction period)
cut_off <- yearweek("2010-12-31")
## define the last date interested in (i.e. end of prediction)
end_date <- yearweek("2011-12-31")
## find how many weeks in period (year) of interest
num_weeks <- as.numeric(end_date - cut_off)
## add in missing weeks till end of year
counts <- counts %>%
## group by the region
group_by_key() %>%
## for each group add rows from the highest epiweek to the end of year
group_modify(~add_row(.,
epiweek = seq(max(.$epiweek) + 1,
end_date,
by = 1)))
pacman::p_load(forecast)
## add in fourier terms using the epiweek and case_int variabless
counts$fourier <- select(counts, epiweek, case_int) %>%
fourier(K = 1)
View(counts)
## define the model you want to fit (negative binomial)
model <- glm_nb_model(
## set number of cases as outcome of interest
case_int ~
## use epiweek to account for the trend
epiweek +
## use the fourier terms to account for seasonality
fourier)
pacman::p_load(forecast,trending)
## add in fourier terms using the epiweek and case_int variabless
counts$fourier <- select(counts, epiweek, case_int) %>%
fourier(K = 1)
pacman::p_load(forecast,trending)
## add in fourier terms using the epiweek and case_int variabless
counts$fourier <- select(counts, epiweek, case_int) %>%
fourier(K = 1)
## define the model you want to fit (negative binomial)
model <- glm_nb_model(
## set number of cases as outcome of interest
case_int ~
## use epiweek to account for the trend
epiweek +
## use the fourier terms to account for seasonality
fourier)
## fit your model using the counts dataset
fitted_model <- trending::fit(model, data.frame(counts))
## calculate confidence intervals and prediction intervals
observed <- predict(fitted_model, simulate_pi = FALSE)
estimate_res <- data.frame(observed$result)
## plot your regression
ggplot(data = estimate_res, aes(x = epiweek)) +
## add in a line for the model estimate
geom_line(aes(y = estimate),
col = "Red") +
## add in a band for the prediction intervals
geom_ribbon(aes(ymin = lower_pi,
ymax = upper_pi),
alpha = 0.25) +
## add in a line for your observed case counts
geom_line(aes(y = case_int),
col = "black") +
## make a traditional plot (with black axes and white background)
theme_classic()
## are the residuals fairly constant over time (if not: outbreaks? change in practice?)
estimate_res %>%
ggplot(aes(x = epiweek, y = resid)) +
geom_line() +
geom_point() +
labs(x = "epiweek", y = "Residuals")
## calculate the residuals
estimate_res <- estimate_res %>%
mutate(resid = fitted_model$result[[1]]$residuals)
## are the residuals fairly constant over time (if not: outbreaks? change in practice?)
estimate_res %>%
ggplot(aes(x = epiweek, y = resid)) +
geom_line() +
geom_point() +
labs(x = "epiweek", y = "Residuals")
## is there autocorelation in the residuals (is there a pattern to the error?)
estimate_res %>%
as_tsibble(index = epiweek) %>%
ACF(resid, lag_max = 52) %>%
autoplot()
## is there autocorelation in the residuals (is there a pattern to the error?)
estimate_res %>%
as_tsibble(index = epiweek) %>%
ACF(resid, lag_max = 52) %>%
autoplot()
## are residuals normally distributed (are under or over estimating?)
estimate_res %>%
ggplot(aes(x = resid)) +
geom_histogram(binwidth = 100) +
geom_rug() +
labs(y = "count")
## compare observed counts to their residuals
## should also be no pattern
estimate_res %>%
ggplot(aes(x = estimate, y = resid)) +
geom_point() +
labs(x = "Fitted", y = "Residuals")
## formally test autocorrelation of the residuals
## H0 is that residuals are from a white-noise series (i.e. random)
## test for independence
## if p value significant then non-random
Box.test(estimate_res$resid, type = "Ljung-Box")
## define start date (when observations began)
start_date <- min(counts$epiweek)
## define a cut-off week (end of baseline, start of prediction period)
cut_off <- yearweek("2010-12-31")
## define the last date interested in (i.e. end of prediction)
end_date <- yearweek("2011-12-31")
## find how many weeks in period (year) of interest
num_weeks <- as.numeric(end_date - cut_off)
## define start date (when observations began)
start_date <- min(counts$epiweek)
## define a cut-off week (end of baseline, start of prediction period)
cut_off <- yearweek("2010-12-31")
## define the last date interested in (i.e. end of prediction)
end_date <- yearweek("2011-12-31")
## find how many weeks in period (year) of interest
num_weeks <- as.numeric(end_date - cut_off)
## add in missing weeks till end of year
counts <- counts %>%
## group by the region
group_by_key() %>%
## for each group add rows from the highest epiweek to the end of year
group_modify(~add_row(.,
epiweek = seq(max(.$epiweek) + 1,
end_date,
by = 1)))
## define start date (when observations began)
start_date <- min(counts$epiweek)
## define a cut-off week (end of baseline, start of prediction period)
cut_off <- yearweek("2010-12-31")
## define the last date interested in (i.e. end of prediction)
end_date <- yearweek("2011-12-31")
## find how many weeks in period (year) of interest
num_weeks <- as.numeric(end_date - cut_off)
## add in missing weeks till end of year
counts <- counts %>%
## group by the region
group_by_key() %>%
## for each group add rows from the highest epiweek to the end of year
group_modify(~add_row(.,
epiweek = seq(max(.$epiweek) + 1,
end_date,
by = 1)))
print("hello")
linelist_cleaned <- readRDS("~/R_training/04_Apr_2024/linelist_cleaned.rds")
linelist_cleaned <- readRDS("~/R_training/04_Apr_2024/linelist_cleaned.rds")
linelist_cleaned <- readRDS("~/R_training/04_Apr_2024/linelist_cleaned.rds")
View(linelist_cleaned)
library(readxl)
linelist_cleaned <- read_excel("R_training/04_Apr_2024/linelist_cleaned.xlsx")
View(linelist_cleaned)
```{r}
library(readxl)
linelist_cleaned <- read_excel("R_training/04_Apr_2024/linelist_cleaned.xlsx")
View(linelist_cleaned)
linelist_cleaned$age_years
# t-test
#
library(ggplot2)
# t-test
#
hist(linelist_cleaned$age_years)
#base R or tidyverse
#base R
linelist_cleaned$gender == 'm'
idx <- linelist_cleaned$gender == 'm'
linelist_cleaned[idx,]
male_linelist <- linelist_cleaned[idx,]
hist(male_linelist)
hist(male_linelist$age_years)
idx <- linelist_cleaned$gender == 'f'
female_linelist <- linelist_cleaned[idx,]
hist(female_linelist$age_years)
hist(female_linelist$age_years)
hist(male_linelist$age_years)
hist(female_linelist$age_years)
ggplot(data=linelist_cleaned)
ggplot(data=linelist_cleaned) + geom_histogram(aes(x=age_years))
ggplot(data=linelist_cleaned) + geom_histogram(aes(x=age_years)) + ggplot(data=male_linelist) + geom_histogram(x=age_years)
ggplot(data=linelist_cleaned) + geom_histogram(aes(x=age_years))
ggplot(data=male_linelist) + geom_histogram(x=age_years)
ggplot(data=male_linelist) + geom_histogram(aes(x=age_years))
ggplot(data=linelist_cleaned) + geom_histogram(aes(x=age_years))
ggplot(data=male_linelist) + geom_histogram(aes(x=age_years))
ggplot() + geom_histogram(data=male_linelist,aes(x=age_years))
+ geom_histogram(data=female_linelist,aes(x=age_years))
ggplot()+ geom_histogram(data=female_linelist,aes(x=age_years))+ geom_histogram(data=male_linelist,aes(x=age_years))
ggplot() + geom_histogram(data=female_linelist,aes(x=age_years),color='red')+ geom_histogram(data=male_linelist,aes(x=age_years))
ggplot() + geom_histogram(data=female_linelist,aes(x=age_years),color='red')+ geom_histogram(data=male_linelist,aes(x=age_years),color='blue')
ggplot() + geom_histogram(data=female_linelist,aes(x=age_years),color='red',fill=None)+ geom_histogram(data=male_linelist,aes(x=age_years),color='blue')
ggplot() + geom_histogram(data=female_linelist,aes(x=age_years),color='red',alpha='0')+ geom_histogram(data=male_linelist,aes(x=age_years),color='blue')
ggplot() + geom_histogram(data=female_linelist,aes(x=age_years),color='red',fill='white')+ geom_histogram(data=male_linelist,aes(x=age_years),color='blue')
ggplot() + geom_histogram(data=female_linelist,aes(x=age_years),color='red',fill='white')+ geom_histogram(data=male_linelist,aes(x=age_years),color='blue',fill='white')
ggplot() + geom_histogram(data=female_linelist,aes(x=age_years),color='red',fill='white',alpha=0.5)+ geom_histogram(data=male_linelist,aes(x=age_years),color='blue',fill='white')
ggplot() + geom_histogram(data=female_linelist,aes(x=age_years),color='red',fill='white',alpha=0.1)+ geom_histogram(data=male_linelist,aes(x=age_years),color='blue',fill='white',alpha=0.1)
```{# t-test}
```{# t-test}
```{# t-test}
```{# t-test}
```{# t-test}
```{# t-test}
help(t.test())
help(t.test
```
help(t.test)
```
t.test(data=linelist_cleaned,age_years~gender)
```
t.test(data=linelist_cleaned,age_years~gender)
# Test whether data is normally distributed
# Shapiro-Wilk Test
shapiro.test(linelist$age_years)
# Test whether data is normally distributed
# Shapiro-Wilk Test
shapiro.test(linelist_cleaned$age_years)
# Testing whether two sampling distributions are the same
# Wilcoxon Rank Sum Test
wilcox.test(age_years ~ outcome)
# Testing whether two sampling distributions are the same
# Wilcoxon Rank Sum Test
wilcox.test(age_years ~ outcome,data=cleaned_linelist)
# Testing whether two sampling distributions are the same
# Wilcoxon Rank Sum Test
wilcox.test(age_years ~ outcome,data=linelist_cleaned)
# Testing whether two sampling distributions are the same
# Wilcoxon Rank Sum Test
wilcox.test(age_years ~ gender,data=linelist_cleaned)
# Testing whether two sampling distributions are the same
# Wilcoxon Rank Sum Test
wilcox.test(age_years ~ outcome,data=linelist_cleaned)
idx <- linelist_cleaned$outcome == 'Death'
male_linelist <- linelist_cleaned[idx,]
idx <- linelist_cleaned$outcome == 'Recover'
female_linelist <- linelist_cleaned[idx,]
library(ggplot2)
ggplot() + geom_histogram(data=female_linelist,aes(x=age_years),color='red',fill='white',alpha=0.1)+ geom_histogram(data=male_linelist,aes(x=age_years),color='blue',fill='white',alpha=0.1)
wilcox.test(age_years ~ outcome,data=linelist_cleaned)
t.test(data=linelist_cleaned,age_years~outcome)
male_linelist <- linelist_cleaned[idx,]
idx <- linelist_cleaned$outcome == 'Recover'
female_linelist <- linelist_cleaned[idx,]
library(ggplot2)
ggplot() + geom_histogram(data=female_linelist,aes(x=age_years),color='red',fill='white',alpha=0.1)+ geom_histogram(data=male_linelist,aes(x=age_years),color='blue',fill='white',alpha=0.1)
# Testing whether two sampling distributions are the same
# Wilcoxon Rank Sum Test
idx <- linelist_cleaned$outcome == 'Death'
male_linelist <- linelist_cleaned[idx,]
idx <- linelist_cleaned$outcome == 'Recover'
female_linelist <- linelist_cleaned[idx,]
library(ggplot2)
ggplot() + geom_histogram(data=female_linelist,aes(x=age_years),color='red',fill='white',alpha=0.1)+ geom_histogram(data=male_linelist,aes(x=age_years),color='blue',fill='white',alpha=0.1)
wilcox.test(age_years ~ outcome,data=linelist_cleaned)
t.test(data=linelist_cleaned,age_years~outcome)
# Testing whether two sampling distributions are the same
# Wilcoxon Rank Sum Test
idx <- linelist_cleaned$outcome x== 'Death'
idx <- linelist_cleaned$outcome == 'Recover'
female_linelist <- linelist_cleaned[idx,]
library(ggplot2)
ggplot() + geom_histogram(data=female_linelist,aes(x=age_years),color='red',fill='white',alpha=0.1)+ geom_histogram(data=male_linelist,aes(x=age_years),color='blue',fill='white',alpha=0.1)
ggplot() + geom_histogram(data=female_linelist,aes(x=age_years),color='red',fill='white',alpha=0.1)+ geom_histogram(data=male_linelist,aes(x=age_years),color='blue',fill='white',alpha=0.1,bins=50
)
ggplot() + geom_histogram(data=female_linelist,aes(x=age_years),color='red',fill='white',alpha=0.1)+ geom_histogram(data=male_linelist,aes(x=age_years),color='blue',fill='white',alpha=0.1,bins=50)
ggplot() + geom_histogram(data=female_linelist,aes(x=age_years),color='red',fill='white',alpha=0.1,bins=50)+ geom_histogram(data=male_linelist,aes(x=age_years),color='blue',fill='white',alpha=0.1,bins=50)
linelist_cleaned
female_linelist
female_linelist.dropna()
dropna(female_linelist)
drop_na(female_linelist)
library(tidyverse)
drop_na(female_linelist$outcome)
is.na(female_linelist$outcome)
drop.na(female_linelist$outcome)
drop_na(female_linelist$outcome)
is.na(female_linelist$outcome)
~is.na(female_linelist$outcome)
~is.na(female_linelist$outcome)
!is.na(female_linelist$outcome)
female_linelist[!is.na(female_linelist$outcome),]
idx <- linelist_cleaned$outcome == 'Death'
male_linelist <- linelist_cleaned[idx,]
male_linelist <- male_linelist[!is.na(male_linelist$outcome),]
idx <- linelist_cleaned$outcome == 'Recover'
female_linelist <- linelist_cleaned[idx,]
female_linelist <- female_linelist[!is.na(female_linelist$outcome),]
library(ggplot2)
ggplot() + geom_histogram(data=female_linelist,aes(x=age_years),color='red',fill='white',alpha=0.1,bins=50)+ geom_histogram(data=male_linelist,aes(x=age_years),color='blue',fill='white',alpha=0.1,bins=50)
# Testing whether two sampling distributions are the same
# Wilcoxon Rank Sum Test
idx <- linelist_cleaned$outcome == 'Death'
male_linelist <- linelist_cleaned[idx,]
idx <- linelist_cleaned$outcome == 'Recover'
female_linelist <- linelist_cleaned[idx,]
library(ggplot2)
ggplot() + geom_histogram(data=female_linelist,aes(x=age_years),color='red',fill='white',alpha=0.1,bins=50)+ geom_histogram(data=male_linelist,aes(x=age_years),color='blue',fill='white',alpha=0.1,bins=50)
View(linelist_cleaned)
table(linelist_cleaned$outcome)
table(female_linelist$outcome)
table(male_linelist$outcome)
# Chi-square
# gender ~ outcome
chisq.test(linelist_cleaned$outcome,linelist$outcome)
# Chi-square
# gender ~ outcome
chisq.test(linelist_cleaned$outcome,linelist_cleaned$gender)
help("chisq.test")
# Chi-square
# gender ~ outcome
Xsq = chisq.test(linelist_cleaned$outcome,linelist_cleaned$gender)
Xsq$observed
Xsq
Xsq$expected
Xsq$residuals
Xsq$stdres
reticulate::repl_python()
yes
Yes
reticulate::repl_python()
reticulate::repl_python()
reticulate::repl_python()
pacman::p_load(
tidyverse,      # includes ggplot2 and other data management tools
janitor,        # cleaning and summary tables
ggforce,        # ggplot extras
rio,            # import/export
here,           # file locator
stringr         # working with characters
)
linelist <- rio::import("linelist_cleaned.rds")
setwd("~/dev/R_training/04_Apr_2024")
linelist <- rio::import("linelist_cleaned.rds")
linelist <- rio::import("linelist_cleaned.rds")
linelist_cleaned <- readRDS("~/dev/R_training/04_Apr_2024/linelist_cleaned.rds")
linelist <- rio::import("linelist_cleaned.rds")
print("hello")
setwd("~/dev/R_training/09_May_2024")
library(readxl)
linelist_cleaned <- read_excel("linelist_cleaned.xlsx")
View(linelist_cleaned)
library(readxl)
linelist_cleaned <- read_excel("linelist_cleaned.xlsx")
linelist_cleaned <- read_excel("linelist_cleaned.xlsx")
pacman::p_load(
tidyverse,      # includes ggplot2 and other data management tools
janitor,        # cleaning and summary tables
ggforce,        # ggplot extras
rio,            # import/export
here,           # file locator
stringr         # working with characters
)
pivot_longer(linelist_cleaned)
pivot_longer(data=linelist_cleaned,cols = outcome)
pivot_longer(data=linelist_cleaned,cols = -case_id)
linelist_cleaned
linelist_cleaned %>% select(c(case_id))
linelist_cleaned %>% select(c(case_id,fever,chills,cough,aches,vomit))
symptoms <- linelist_cleaned %>% select(c(case_id,fever,chills,cough,aches,vomit))
pivot_longer(data=symptoms,cols = -case_id)
pivot_longer(data=linelist_cleaned,cols = -case_id)
pivot_longer(data=symptoms,cols = -case_id)
symptoms
library(ggplot2)
ggplot()
ggplot(data=linelist)
ggplot(data=linelist_cleaned)
# geoms
ggplot(data=linelist_cleaned) + geom_point()
# geoms
ggplot(data=linelist_cleaned) + geom_point(mapping=aes(ht_cm,wt_kg))
ggplot(data=linelist_cleaned,mapping=aes(x=ht_cm))
ggplot(data=linelist_cleaned,mapping=aes(x=ht_cm)) + geom_histogram()
ggplot(data=linelist_cleaned,mapping=aes(x=ht_cm)) + geom_histogram(bins=50)
ggplot(data=linelist_cleaned,mapping=aes(x=ht_cm)) + geom_histogram(bins=100)
ggplot(data=linelist_cleaned,mapping=aes(x=ht_cm)) + geom_histogram(bins=100) geom_point(mapping=aes(ht_cm,wt_kg))
ggplot(data=linelist_cleaned,mapping=aes(x=ht_cm)) + geom_histogram(bins=100) + geom_point(mapping=aes(ht_cm,wt_kg))
ggplot(data=linelist_cleaned,mapping=aes(x=ht_cm))
ggplot(data=linelist_cleaned,mapping=aes(x=ht_cm)) + geom_histogram(bins=100)
ggplot(data=linelist_cleaned,mapping=aes(x=ht_cm)) + geom_histogram(bins=100)  + geom_point(mapping=aes(ht_cm,wt_kg))
+ geom_point(mapping=aes(ht_cm,wt_kg))
ggplot(data=linelist_cleaned,mapping=aes(x=ht_cm)) + geom_histogram(bins=100)
ggplot(data=linelist_cleaned,mapping=aes(x=ht_cm)) + geom_histogram(bins=100)
ggplot(data=linelist_cleaned,mapping=aes(x=ht_cm)) + geom_histogram(bins=100)
+ geom_histogram(bins=100)
+ geom_histogram(bins=100)
ggplot(data=linelist_cleaned,mapping=aes(x=ht_cm)) \\
ggplot(data=linelist_cleaned,mapping=aes(x=ht_cm)) + geom_histogram(bins=100)   + geom_point(mapping=aes(ht_cm,wt_kg))
ggplot(data=linelist_cleaned) + geom_point(mapping=aes(ht_cm,wt_kg,shape='dot'))
ggplot(data=linelist_cleaned) + geom_point(mapping=aes(ht_cm,wt_kg,shape='triangle'))
ggplot(data=linelist_cleaned) + geom_point(mapping=aes(ht_cm,wt_kg),shape='triangle')
ggplot(data=linelist_cleaned) + geom_point(mapping=aes(ht_cm,wt_kg),shape='triangle',color='darkgreen')
ggplot(data=linelist_cleaned) + geom_point(mapping=aes(ht_cm,wt_kg),shape='triangle',color='darkgreen',alpha=.5)
ggplot(data=linelist_cleaned) + geom_point(mapping=aes(ht_cm,wt_kg),shape='triangle',color='darkgreen',alpha=.2)
+ geom_point(mapping=aes(ht_cm,wt_kg),shape='triangle',color='darkgreen',alpha=.2)
+ geom_point(mapping=aes(ht_cm,wt_kg),shape='triangle',color='darkgreen',alpha=.2)
+ geom_point(mapping=aes(ht_cm,wt_kg),shape='triangle',color='darkgreen',alpha=.2)
ggplot(data=linelist_cleaned). + geom_point(mapping=aes(ht_cm,wt_kg),shape='triangle',color='darkgreen',alpha=.2)
ggplot(data=linelist_cleaned) + geom_point(mapping=aes(ht_cm,wt_kg),shape='triangle',color='darkgreen',alpha=.2) + geom_point(mapping=aes(ht_cm,wt_kg),shape='triangle',color='darkgreen',alpha=.2)
ggplot(data=linelist_cleaned) + geom_point(mapping=aes(ht_cm,wt_kg),shape='triangle',color='darkgreen',alpha=.2) + geom_point(mapping=aes(ht_cm,age),shape='triangle',color='darkgreen',alpha=.2)
ggplot(data=linelist_cleaned) + geom_point(mapping=aes(ht_cm,wt_kg),shape='triangle',color='darkgreen',alpha=.2) + geom_point(mapping=aes(ht_cm,age),shape='triangle',color='red',alpha=.2)
ggplot(data=linelist_cleaned) + geom_point(mapping=aes(ht_cm,wt_kg,color=gender),shape='triangle',color='darkgreen',alpha=.2)
ggplot(data=linelist_cleaned) + geom_point(mapping=aes(ht_cm,wt_kg,color=gender),shape='triangle')
ggplot(data=linelist_cleaned) + geom_point(mapping=aes(ht_cm,wt_kg,color=gender),shape='dot')
ggplot(data=linelist_cleaned) + geom_point(mapping=aes(ht_cm,wt_kg,color=gender),shape='dot')
ggplot(data=linelist_cleaned) + geom_point(mapping=aes(ht_cm,wt_kg,color=gender))
ggplot(data=linelist_cleaned) + geom_point(mapping=aes(ht_cm,wt_kg,color=gender),size=.5)
ggplot(data=linelist_cleaned) + geom_point(mapping=aes(ht_cm,wt_kg,color=gender),size=.5,alpha=.5)
ggplot(data=linelist_cleaned) + geom_point(mapping=aes(ht_cm,wt_kg,color=gender),size=.8,alpha=.5)
ggplot(data=linelist_cleaned,mapping=aes(x=ht_cm)) + geom_histogram(bins=100)
ggplot(data=linelist_cleaned,mapping=aes(x=ht_cm)) + geom_histogram(bins=100)
ggplot(data=linelist_cleaned) + geom_point(mapping=aes(ht_cm,wt_kg,color=gender),size=.8,alpha=.5)
ggplot(data=linelist_cleaned,mapping=aes(x=ht_cm)) + geom_histogram(bins=100)
ggplot(data=linelist_cleaned) + geom_point(mapping=aes(ht_cm,wt_kg,color=gender),size=.8,alpha=.5)
ggplot(data=linelist_cleaned) + geom_point(mapping=aes(ht_cm,wt_kg,color=gender),size=.8,alpha=.5) + geom_smooth(method='lm')
ggplot(data=linelist_cleaned) + geom_point(mapping=aes(ht_cm,wt_kg,color=gender),size=.8,alpha=.5) + geom_smooth(mapping=aes(ht_cm,wt_kg,color=gender),method='lm')
ggplot(data=linelist_cleaned,mapping=aes(ht_cm,wt_kg,color=gender)) + geom_point(size=.8,alpha=.5) + geom_smooth(method='lm')
help(geom_smooth)
ggplot(data=linelist_cleaned,mapping=aes(ht_cm,wt_kg,color=gender)) + geom_point(size=.8,alpha=.5) + geom_smooth(method='glm')
ggplot(data=linelist_cleaned,mapping=aes(age,wt_kg,color=gender)) + geom_point(size=.8,alpha=.5) + geom_smooth(method='glm')
ggplot(data=linelist_cleaned,mapping=aes(age,wt_kg,color=gender)) + geom_point(size=.8,alpha=.5) + geom_smooth(method='glm')
ggplot(data=linelist_cleaned,mapping=aes(age,wt_kg,color=gender)) + geom_point(size=.8,alpha=.5) + geom_smooth(method='lm')
my_plot <- ggplot(data=linelist_cleaned,mapping=aes(age,wt_kg,color=gender)) + geom_point(size=.8,alpha=.5) + geom_smooth(method='lm')
my_plot
my_plot <- ggplot(data=linelist_cleaned,mapping=aes(age,wt_kg,color=gender)) + geom_point(size=.8,alpha=.5) + geom_smooth(method='lm')
my_plot
my_plot + geom_vline(xintercept = mean(linelist_cleaned$age))
# my_plot + geom_vline(xintercept = mean(linelist_cleaned$age))
linelist_cleaned
# my_plot + geom_vline(xintercept = mean(linelist_cleaned$age))
linelist_cleaned$age
# my_plot + geom_vline(xintercept = mean(linelist_cleaned$age))
mean(linelist_cleaned$age)
help(mean)
# my_plot + geom_vline(xintercept = mean(linelist_cleaned$age))
mean(linelist_cleaned$age,na.rm = TRUE)
my_plot + geom_vline(xintercept = mean(linelist_cleaned$age,na.rm = TRUE))
my_plot + geom_vline(xintercept = mean(linelist_cleaned$age,na.rm = TRUE)) + geom_hline(xintercept = mean(linelist_cleaned$wt_kg,na.rm = TRUE))
my_plot + geom_vline(xintercept = mean(linelist_cleaned$age,na.rm = TRUE)) + geom_hline(yintercept = mean(linelist_cleaned$wt_kg,na.rm = TRUE))
my_plot + geom_vline(xintercept = mean(linelist_cleaned$age,na.rm = TRUE)) + geom_hline(yintercept = mean(linelist_cleaned$wt_kg,na.rm = TRUE),color='red')
my_plot_with_centroid <- my_plot + geom_vline(xintercept = mean(linelist_cleaned$age,na.rm = TRUE)) + geom_hline(yintercept = mean(linelist_cleaned$wt_kg,na.rm = TRUE),color='red')
my_plot
my_plot_with_centroid <- my_plot + geom_vline(xintercept = mean(linelist_cleaned$age,na.rm = TRUE)) + geom_hline(yintercept = mean(linelist_cleaned$wt_kg,na.rm = TRUE),color='red')
my_plot_with_centroid
ggsave(filename='out.jpg',plot=my_plot_with_centroid)
help(ggsave)
ggsave(filename='out.jpg',plot=my_plot_with_centroid,width=7.2,height=4.45)
ggsave(filename='out.jpg',plot=my_plot_with_centroid,width=16,height=9)
2
ggsave(filename='out.jpg',plot=my_plot_with_centroid,width=7.2,height=4.45)
ggsave(filename='out.jpg',plot=my_plot_with_centroid,width=7.2,height=4.45,dpi=1-)
ggsave(filename='out.jpg',plot=my_plot_with_centroid,width=7.2,height=4.45,dpi=10)
ggsave(filename='out.jpg',plot=my_plot_with_centroid,width=7.2,height=4.45,dpi=300)
ggsave(filename='out.jpg',plot=my_plot_with_centroid,width=7.2,height=4.45,dpi=500)
ggsave(filename='out.pdf',plot=my_plot_with_centroid,width=7.2,height=4.45)
my_plot_with_centroid <- my_plot + geom_vline(xintercept = mean(linelist_cleaned$age,na.rm = TRUE)) + geom_hline(yintercept = mean(linelist_cleaned$wt_kg,na.rm = TRUE),color='red') + labs(title="Age vs weight with centroid")
ggsave(filename='out.pdf',plot=my_plot_with_centroid,width=7.2,height=4.45)
help(labs)
my_plot_with_centroid <- my_plot + geom_vline(xintercept = mean(linelist_cleaned$age,na.rm = TRUE)) + geom_hline(yintercept = mean(linelist_cleaned$wt_kg,na.rm = TRUE),color='red') + labs(title="Age vs weight with centroid") + xlab("Age")
my_plot_with_centroid <- my_plot + geom_vline(xintercept = mean(linelist_cleaned$age,na.rm = TRUE)) + geom_hline(yintercept = mean(linelist_cleaned$wt_kg,na.rm = TRUE),color='red') + labs(title="Age vs weight with centroid") + xlab("Age (years)") + ylab("Weight (kg)")
ggsave(filename='out.pdf',plot=my_plot_with_centroid,width=7.2,height=4.45)
