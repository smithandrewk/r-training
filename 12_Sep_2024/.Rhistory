# aka "training" a model
model <- glm(outcome ~ age, data = df, family=binomial)
help(glm)
y_output <- predict(model)
y_pred <- y_output > .05
y_true <- df$outcome == "Not Infected"
sum(y_true == y_pred)/length(y_true)
model
df$outcome
levels(df$outcome)
df$outcome
df$outcome
df$outcome == "Not Infected"
sum(y_true == y_pred)/length(y_true)
y_pred
y_output
y_output > .5
y_pred <- y_output > 5
y_pred <- y_output > .5
y_pred
ifelse(y_output > 0.5,"Infected","Not Infected")
y_pred == df$outcome
y_pred <- ifelse(y_output > 0.5,"Infected","Not Infected")
y_pred == df$outcome
accuracy <- sum(y_true == y_pred)/length(y_true)
accuracy
accuracy
accuracy <- sum(y_true == y_pred)/length(y_true)
accuracy
y_pred <- ifelse(y_output > 0.5,"Not Infected","Infected")
y_pred == df$outcome
accuracy <- sum(y_true == y_pred)/length(y_true)
accuracy
y_true
y_true == y_pred
y_pred
y_true
y_true
accuracy
accuracy <- sum(y_true == df$outcome)/length(y_true)
accuracy
y_pred == df$outcome
y_pred == df$outcome
sum(y_pred == df$outcome)
sum(y_pred == df$outcome)/100
levels(df$outcome)
y_pred <- ifelse(y_output > 0.5,"Infected","Not Infected")
sum(y_pred == df$outcome)/100
y_pred <- ifelse(y_output > 0.5,"Infected","Not Infected")
sum(y_pred == df$outcome)/100
install.packages("caret")
library(caret)
y_pred <- ifelse(y_output > 0.5,"Infected","Not Infected")
y_true <- df$outcome
sum(y_pred == df$outcome)/100
install.packages("caret")
library(caret)
install.packages("caret")
confusion_matrix <- confusionMatrix(y_pred,y_true)
y_true
y_pred
as.factor(y_pred)
confusion_matrix <- confusionMatrix(as.factor(y_pred),y_true)
print(confusion_matrix)
# Fitting a Generalized Linear Model (i.e. Logistic Regression)
# aka "training" a model
model <- glm(outcome ~ age + exposure, data = df, family=binomial)
y_output <- predict(model)
y_output
y_pred <- ifelse(y_output > 0.5,"Infected","Not Infected")
y_true <- df$outcome
sum(y_pred == df$outcome)/100
y_pred <- ifelse(y_output > 0,"Infected","Not Infected")
y_true <- df$outcome
sum(y_pred == df$outcome)/100
install.packages("caret")
install.packages("caret")
confusion_matrix <- confusionMatrix(as.factor(y_pred),y_true)
print(confusion_matrix)
y_pred <- ifelse(y_output > 0.5,"Infected","Not Infected")
y_true <- df$outcome
sum(y_pred == df$outcome)/100
y_pred <- ifelse(y_output > 0.5,"Not Infected","Infected")
y_true <- df$outcome
sum(y_pred == df$outcome)/100
y_pred <- ifelse(y_output > 0,"Not Infected","Infected")
y_true <- df$outcome
sum(y_pred == df$outcome)/100
confusion_matrix <- confusionMatrix(as.factor(y_pred),y_true)
print(confusion_matrix)
# Fitting a Generalized Linear Model (i.e. Logistic Regression)
# aka "training" a model
model <- glm(outcome ~ age + exposure + fever + cough, data = df, family=binomial)
help(glm)
y_output <- predict(model)
y_output
y_pred <- ifelse(y_output > 0,"Not Infected","Infected")
y_true <- df$outcome
sum(y_pred == df$outcome)/100
install.packages("caret")
install.packages("caret")
y_pred <- ifelse(y_output > 0.5,"Not Infected","Infected")
y_true <- df$outcome
sum(y_pred == df$outcome)/100
y_pred <- ifelse(y_output > 0,"Not Infected","Infected")
y_true <- df$outcome
sum(y_pred == df$outcome)/100
confusion_matrix <- confusionMatrix(as.factor(y_pred),y_true)
print(confusion_matrix)
# Fitting a Generalized Linear Model (i.e. Logistic Regression)
# aka "training" a model
model <- glm(outcome ~ age, data = df, family=binomial)
# Fitting a Generalized Linear Model (i.e. Logistic Regression)
# aka "training" a model
model <- glm(outcome ~ age, data = df, family=binomial)
y_output <- predict(model)
y_pred <- ifelse(y_output > 0,"Not Infected","Infected")
y_true <- df$outcome
sum(y_pred == df$outcome)/100
# Fitting a Generalized Linear Model (i.e. Logistic Regression)
# aka "training" a model
model <- glm(outcome ~ age + fever, data = df, family=binomial)
y_output <- predict(model)
y_pred <- ifelse(y_output > 0,"Not Infected","Infected")
y_true <- df$outcome
sum(y_pred == df$outcome)/100
# Fitting a Generalized Linear Model (i.e. Logistic Regression)
# aka "training" a model
model <- glm(outcome ~ age + fever + exposure, data = df, family=binomial)
y_output <- predict(model)
y_pred <- ifelse(y_output > 0,"Not Infected","Infected")
y_true <- df$outcome
sum(y_pred == df$outcome)/100
# Fitting a Generalized Linear Model (i.e. Logistic Regression)
# aka "training" a model
model <- glm(outcome ~ age + fever + exposure + cough, data = df, family=binomial)
y_output <- predict(model)
y_pred <- ifelse(y_output > 0,"Not Infected","Infected")
y_true <- df$outcome
sum(y_pred == df$outcome)/100
print(confusion_matrix)
library(readxl)
df <- read_excel("r-training/28_Aug_2024/linelist_cleaned.xlsx")
View(df)
#df <- read_csv("r-training/28_Aug_2024/nicer_epidemiology_data.csv")
df$fever <- as.factor(df$fever)
df$cough <- as.factor(df$cough)
df$exposure <- as.factor(df$exposure)
df$outcome <- as.factor(df$outcome)
#df <- read_csv("r-training/28_Aug_2024/nicer_epidemiology_data.csv")
df$fever <- as.factor(df$fever)
df$cough <- as.factor(df$cough)
#df$exposure <- as.factor(df$exposure)
df$outcome <- as.factor(df$outcome)
# Fitting a Generalized Linear Model (i.e. Logistic Regression)
# aka "training" a model
model <- glm(outcome ~ age + fever + cough, data = df, family=binomial)
y_output <- predict(model)
y_pred <- ifelse(y_output > 0,"Not Infected","Infected")
y_pred <- ifelse(y_output > 0,"Recover","Death")
y_true <- df$outcome
sum(y_pred == df$outcome)/100
df = na.omit(df)
# Fitting a Generalized Linear Model (i.e. Logistic Regression)
# aka "training" a model
model <- glm(outcome ~ age + fever + cough, data = df, family=binomial)
y_output <- predict(model)
y_pred <- ifelse(y_output > 0,"Recover","Death")
y_true <- df$outcome
sum(y_pred == df$outcome)/100
# Install necessary packages
install.packages("GGally")    # For pairplot equivalent
install.packages("rpart")     # For decision tree
install.packages("rpart.plot")# For plotting the decision tree
# Load libraries
library(GGally)
library(rpart)
library(rpart.plot)
# Load the dataset
df <- read.csv('./nicer_epidemiology_data.csv')
setwd("~/r-training/28_Aug_2024")
# Load the dataset
df <- read.csv('./nicer_epidemiology_data.csv')
# Convert categorical variables to factors
df$fever <- as.factor(df$fever)
df$cough <- as.factor(df$cough)
df$exposure <- as.factor(df$exposure)
df$outcome <- as.factor(df$outcome)
# Visualize the pairplot (similar to Seaborn's pairplot)
ggpairs(df)
# Split the data into predictors (X) and outcome (y)
X <- df[, 1:4] # First 4 columns (age, fever, cough, exposure)
y <- df$outcome # Outcome column
# Fit a decision tree
clf <- rpart(outcome ~ ., data = df, method = "class")
# Plot the decision tree
rpart.plot(clf)
# Evaluate the accuracy on the training set
predicted <- predict(clf, X, type = "class")
accuracy <- mean(predicted == y)
print(paste("Accuracy:", round(accuracy, 2)))
# Generate a confusion matrix
conf_matrix <- confusionMatrix(predicted, y)
install.packages("caret")     # For confusion matrix
library(caret)
# Generate a confusion matrix
conf_matrix <- confusionMatrix(predicted, y)
print(conf_matrix)
# Load the dataset
df <- read.csv('./nicer_epidemiology_data.csv')
# Convert categorical variables to factors
df$fever <- as.factor(df$fever)
df$cough <- as.factor(df$cough)
df$exposure <- as.factor(df$exposure)
df$outcome <- as.factor(df$outcome)
# Fit the model
model <- glm(outcome ~ age + fever, data = data, family = binomial)
# Fit the model
model <- glm(outcome ~ age + fever, data = df, family = binomial)
# View the summary of the model
summary(model)
source("~/r-training/28_Aug_2024/last_week.R", echo=TRUE)
# Make predictions on the dataset
predictions <- predict(model, type = "response")
predicted_classes <- ifelse(predictions > 0.5, "Recover", "Death")
# Compare predictions with actual outcomes
table(predicted_classes, data$outcome)
# Compare predictions with actual outcomes
table(predicted_classes, df$outcome)
# Calculate accuracy
accuracy <- mean(predicted_classes == data$outcome)
# Calculate accuracy
accuracy <- mean(predicted_classes == df$outcome)
paste("Accuracy:", round(accuracy, 2))
source("~/r-training/28_Aug_2024/last_week.R", echo=TRUE)
paste("Accuracy:", round(accuracy, 3))
View(df)
predicted_classes <- ifelse(predictions > 0.5, "Infected", "Not Infected")
# Compare predictions with actual outcomes
table(predicted_classes, df$outcome)
# Calculate accuracy
accuracy <- mean(predicted_classes == df$outcome)
paste("Accuracy:", round(accuracy, 3))
# Compare predictions with actual outcomes
table(predicted_classes, df$outcome)
predicted_classes
df$outcome
df <- read_excel("linelist_cleaned.xlsx")
library(readxl)
df <- read_excel("linelist_cleaned.xlsx")
#df$exposure <- as.factor(df$exposure)
df$outcome <- as.factor(df$outcome)
# Visualize the pairplot (similar to Seaborn's pairplot)
ggpairs(df)
setwd("~/r-training/12_Sep_2024")
library(readxl)
df <- read_excel("linelist_cleaned.xlsx")
install.packages("GGally")    # For pairplot equivalent
library(GGally)
library(GGally)
install.packages("GGally")
install.packages("GGally")
df
df[c("gender","ht_cm"),]
df[c("gender","ht_cm")]
df <- df[c("gender","ht_cm")]
View(df)
ggpairs(df)
library(GGally)
ggpairs(df)
ggpairs(df)
library(readxl)
install.packages("GGally")    # For pairplot equivalent
install.packages("GGally")
library(GGally)
df <- read_excel("linelist_cleaned.xlsx")
library(readxl)
df <- read_excel("linelist_cleaned.xlsx")
df <- df[c("gender","ht_cm")]
ggpairs(df)
library(rpart)
help(rpart)
clf <- rpart(gender ~ ht_cm, data = df, method = "class")
library(rpart.plot)
rpart.plot(clf)
help(predict)
clf(X)
clf(X)
rpart.plot(clf)
predict(clf, X, type = "class")
predict(clf, df$ht_cm, type = "class")
X <- df[,2] # First 4 columns (age, fever, cough, exposure)
X
predict(clf, df$ht_cm, type = "class")
predict(clf, X, type = "class")
X
predict(clf, X, type = "class")
y_pred <- predict(clf, X, type = "class")
y_true <- df[,1]
y_true
y_pred
y_true == y_pred
y_true <- as.factor(df[,1])
y_true <- df$gender
y_pred <- predict(clf, X, type = "class")
y_true == y_pred
df[,1]
y_true == y_pred
sum(y_true == y_pred)
help(sum)
sum(y_true == y_pred,na.rm=TRUE)
mean(y_true == y_pred,na.rm=TRUE)
sum(y_true == y_pred,na.rm=TRUE)
sum(y_true == y_pred,na.rm=TRUE) /
df
df
na.omit(df)
df <- na.omit(df)
ggpairs(df)
clf <- rpart(gender ~ ht_cm, data = df, method = "class")
rpart.plot(clf)
X <- df[,2]
y_true <- df$gender
y_pred <- predict(clf, X, type = "class")
sum(y_true == y_pred,na.rm=TRUE)
sum(y_true == y_pred,na.rm=TRUE) / len(df)
sum(y_true == y_pred,na.rm=TRUE) / length(df)
sum(y_true == y_pred,na.rm=TRUE) /
length(df)
sum(y_true == y_pred,na.rm=TRUE) /length(df)
sum(y_true == y_pred,na.rm=TRUE)/length(df)
sum(y_true == y_pred,na.rm=TRUE)
num/length(df)
num <- sum(y_true == y_pred,na.rm=TRUE)
num/length(df)
num
num / 2
length(df)
length(y_true)
sum(y_true == y_pred,na.rm=TRUE)/length(y_true)
# is this better than random chance?
# 5610 observations
.668 * 5610
table(df)
df
df$gender
df$gender == "m"
sum(df$gender == "m")
sum(df$gender == "m") / length(df$gender)
sum(y_true == y_pred,na.rm=TRUE)/length(y_true) # compute accuracy
df <- read_excel("linelist_cleaned.xlsx")
df <- df[c("gender","ht_cm")]
conf_matrix <- confusionMatrix(predicted, y)
print(conf_matrix)
43/49
25/26
25/51
43/69
25/31
df <- read_excel("linelist_cleaned.xlsx")
df <- df[c("gender","ht_cm","wt_kg")]
df <- na.omit(df)
ggpairs(df)
clf <- rpart(gender ~ ht_cm, data = df, method = "class")
clf <- rpart(gender ~ ht_cm + wt_kg, data = df, method = "class")
rpart.plot(clf)
X <- df[,2]
X <- df[,2:3]
X <- df[,2:3]
y_true <- df$gender
y_pred <- predict(clf, X, type = "class")
sum(y_true == y_pred,na.rm=TRUE)/length(y_true) # compute accuracy
sum(df$gender == "m") / length(df$gender)
conf_matrix <- confusionMatrix(predicted, y)
#sum(df$gender == "m") / length(df$gender)
library(caret)
conf_matrix <- confusionMatrix(predicted, y)
print(conf_matrix)
conf_matrix <- confusionMatrix(y_pred,y_true)
conf_matrix <- confusionMatrix(y_true, y_true)
conf_matrix <- confusionMatrix(y_pred, y_true)
y_pred
y_true
as.factor(y_true)
df$gender <- as.factor(df$gender)
df <- df[c("gender","ht_cm","wt_kg")]
df <- na.omit(df)
ggpairs(df)
clf <- rpart(gender ~ ht_cm + wt_kg, data = df, method = "class")
rpart.plot(clf)
X <- df[,2:3]
y_true <- df$gender
y_pred <- predict(clf, X, type = "class")
sum(y_true == y_pred,na.rm=TRUE)/length(y_true) # compute accuracy
#sum(df$gender == "m") / length(df$gender)
library(caret)
conf_matrix <- confusionMatrix(y_pred, y_true)
print(conf_matrix)
df <- read_excel("linelist_cleaned.xlsx")
rpart.plot(clf)
df <- df[c("gender","ht_cm","wt_kg","age")]
df <- na.omit(df)
ggpairs(df)
clf <- rpart(gender ~ ht_cm + wt_kg + age, data = df, method = "class")
rpart.plot(clf)
X <- df[,2:4]
y_true <- df$gender
y_pred <- predict(clf, X, type = "class")
sum(y_true == y_pred,na.rm=TRUE)/length(y_true) # compute accuracy
df <- read_excel("linelist_cleaned.xlsx")
df <- read_excel("linelist_cleaned.xlsx")
df <- read_excel("linelist_cleaned.xlsx")
df$gender <- as.factor(df$gender)
df <- df[c("gender","ht_cm","wt_kg","age","bmi")]
df <- na.omit(df)
ggpairs(df)
clf <- rpart(gender ~ ht_cm + wt_kg + age, data = df, method = "class")
clf <- rpart(gender ~ ., data = df, method = "class")
rpart.plot(clf)
X <- df[,2:]
X <- df[,2:5]
y_true <- df$gender
y_pred <- predict(clf, X, type = "class")
sum(y_true == y_pred,na.rm=TRUE)/length(y_true) # compute accuracy
conf_matrix <- confusionMatrix(y_pred, y_true)
print(conf_matrix)
df <- read_excel("linelist_cleaned.xlsx")
df$gender <- as.factor(df$gender)
df <- df[c("gender","ht_cm","wt_kg","age","bmi","temp")]
df <- na.omit(df)
ggpairs(df)
clf <- rpart(gender ~ ., data = df, method = "class")
rpart.plot(clf)
X <- df[,2:5]
X <- df[,2:6]
y_true <- df$gender
y_pred <- predict(clf, X, type = "class")
sum(y_true == y_pred,na.rm=TRUE)/length(y_true) # compute accuracy
df <- df[c("gender","ht_cm","wt_kg","age","bmi")]
df <- na.omit(df)
clf <- rpart(gender ~ ., data = df, method = "class")
rpart.plot(clf)
X <- df[,2:6]
X <- df[,2:5]
y_true <- df$gender
y_pred <- predict(clf, X, type = "class")
sum(y_true == y_pred,na.rm=TRUE)/length(y_true) # compute accuracy
clf <- rpart(gender ~ ht_cm + wt_kg + age + bmi, data = df, method = "class")
rpart.plot(clf)
X <- df[,2:5]
df <- df[c("gender","ht_cm","wt_kg","age")]
df <- read_excel("linelist_cleaned.xlsx")
df$gender <- as.factor(df$gender)
df <- df[c("gender","ht_cm","wt_kg","age")]
df <- na.omit(df)
ggpairs(df)
clf <- rpart(gender ~ ht_cm + wt_kg + age, data = df, method = "class")
rpart.plot(clf)
X <- df[,2:4]
y_true <- df$gender
y_pred <- predict(clf, X, type = "class")
sum(y_true == y_pred,na.rm=TRUE)/length(y_true) # compute accuracy
df <- read_excel("linelist_cleaned.xlsx")
df$gender <- as.factor(df$gender)
df <- df[c("gender","ht_cm","wt_kg","age","bmi")]
df <- na.omit(df)
ggpairs(df)
clf <- rpart(gender ~ ht_cm + wt_kg + age + bmi, data = df, method = "class")
rpart.plot(clf)
X <- df[,2:5]
y_true <- df$gender
y_pred <- predict(clf, X, type = "class")
sum(y_true == y_pred,na.rm=TRUE)/length(y_true) # compute accuracy
df <- read_excel("linelist_cleaned.xlsx")
df <- read_excel("linelist_cleaned.xlsx")
df$gender <- as.factor(df$gender)
df$aches <- as.factor(df$aches)
df$cough <- as.factor(df$cough)
df$fever <- as.factor(df$fever)
df$chills <- as.factor(df$chills)
df$vomit <- as.factor(df$vomit)
df <- df[c("gender","ht_cm","wt_kg","age","bmi","aches","cough","fever","chills","vomit")]
df <- na.omit(df)
ggpairs(df)
clf <- rpart(gender ~ ., data = df, method = "class")
rpart.plot(clf)
X <- df[,2:20]
y_true <- df$gender
y_pred <- predict(clf, X, type = "class")
sum(y_true == y_pred,na.rm=TRUE)/length(y_true) # compute accuracy
df <- df[c("gender","ht_cm","wt_kg","age","bmi")]
df <- read_excel("linelist_cleaned.xlsx")
df$gender <- as.factor(df$gender)
df <- df[c("gender","ht_cm","wt_kg","age","bmi")]
df <- na.omit(df)
ggpairs(df)
clf <- rpart(gender ~ ., data = df, method = "class")
rpart.plot(clf)
X <- df[,2:5]
df <- df[c("gender","ht_cm","wt_kg","age","bmi")]
df <- na.omit(df)
ggpairs(df)
clf <- rpart(gender ~ ., data = df, method = "class")
rpart.plot(clf)
X <- df[,2:5]
y_true <- df$gender
y_pred <- predict(clf, X, type = "class")
sum(y_true == y_pred,na.rm=TRUE)/length(y_true) # compute accuracy
#sum(df$gender == "m") / length(df$gender)
library(caret)
conf_matrix <- confusionMatrix(y_pred, y_true)
print(conf_matrix)
