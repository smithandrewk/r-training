counts$fourier <- select(counts, epiweek, case_int) %>%
fourier(K = 1)
View(counts)
## define the model you want to fit (negative binomial)
model <- glm_nb_model(
## set number of cases as outcome of interest
case_int ~
## use epiweek to account for the trend
epiweek +
## use the fourier terms to account for seasonality
fourier)
pacman::p_load(forecast,trending)
## add in fourier terms using the epiweek and case_int variabless
counts$fourier <- select(counts, epiweek, case_int) %>%
fourier(K = 1)
pacman::p_load(forecast,trending)
## add in fourier terms using the epiweek and case_int variabless
counts$fourier <- select(counts, epiweek, case_int) %>%
fourier(K = 1)
## define the model you want to fit (negative binomial)
model <- glm_nb_model(
## set number of cases as outcome of interest
case_int ~
## use epiweek to account for the trend
epiweek +
## use the fourier terms to account for seasonality
fourier)
## fit your model using the counts dataset
fitted_model <- trending::fit(model, data.frame(counts))
## calculate confidence intervals and prediction intervals
observed <- predict(fitted_model, simulate_pi = FALSE)
estimate_res <- data.frame(observed$result)
## plot your regression
ggplot(data = estimate_res, aes(x = epiweek)) +
## add in a line for the model estimate
geom_line(aes(y = estimate),
col = "Red") +
## add in a band for the prediction intervals
geom_ribbon(aes(ymin = lower_pi,
ymax = upper_pi),
alpha = 0.25) +
## add in a line for your observed case counts
geom_line(aes(y = case_int),
col = "black") +
## make a traditional plot (with black axes and white background)
theme_classic()
## are the residuals fairly constant over time (if not: outbreaks? change in practice?)
estimate_res %>%
ggplot(aes(x = epiweek, y = resid)) +
geom_line() +
geom_point() +
labs(x = "epiweek", y = "Residuals")
## calculate the residuals
estimate_res <- estimate_res %>%
mutate(resid = fitted_model$result[[1]]$residuals)
## are the residuals fairly constant over time (if not: outbreaks? change in practice?)
estimate_res %>%
ggplot(aes(x = epiweek, y = resid)) +
geom_line() +
geom_point() +
labs(x = "epiweek", y = "Residuals")
## is there autocorelation in the residuals (is there a pattern to the error?)
estimate_res %>%
as_tsibble(index = epiweek) %>%
ACF(resid, lag_max = 52) %>%
autoplot()
## is there autocorelation in the residuals (is there a pattern to the error?)
estimate_res %>%
as_tsibble(index = epiweek) %>%
ACF(resid, lag_max = 52) %>%
autoplot()
## are residuals normally distributed (are under or over estimating?)
estimate_res %>%
ggplot(aes(x = resid)) +
geom_histogram(binwidth = 100) +
geom_rug() +
labs(y = "count")
## compare observed counts to their residuals
## should also be no pattern
estimate_res %>%
ggplot(aes(x = estimate, y = resid)) +
geom_point() +
labs(x = "Fitted", y = "Residuals")
## formally test autocorrelation of the residuals
## H0 is that residuals are from a white-noise series (i.e. random)
## test for independence
## if p value significant then non-random
Box.test(estimate_res$resid, type = "Ljung-Box")
## define start date (when observations began)
start_date <- min(counts$epiweek)
## define a cut-off week (end of baseline, start of prediction period)
cut_off <- yearweek("2010-12-31")
## define the last date interested in (i.e. end of prediction)
end_date <- yearweek("2011-12-31")
## find how many weeks in period (year) of interest
num_weeks <- as.numeric(end_date - cut_off)
## define start date (when observations began)
start_date <- min(counts$epiweek)
## define a cut-off week (end of baseline, start of prediction period)
cut_off <- yearweek("2010-12-31")
## define the last date interested in (i.e. end of prediction)
end_date <- yearweek("2011-12-31")
## find how many weeks in period (year) of interest
num_weeks <- as.numeric(end_date - cut_off)
## add in missing weeks till end of year
counts <- counts %>%
## group by the region
group_by_key() %>%
## for each group add rows from the highest epiweek to the end of year
group_modify(~add_row(.,
epiweek = seq(max(.$epiweek) + 1,
end_date,
by = 1)))
## define start date (when observations began)
start_date <- min(counts$epiweek)
## define a cut-off week (end of baseline, start of prediction period)
cut_off <- yearweek("2010-12-31")
## define the last date interested in (i.e. end of prediction)
end_date <- yearweek("2011-12-31")
## find how many weeks in period (year) of interest
num_weeks <- as.numeric(end_date - cut_off)
## add in missing weeks till end of year
counts <- counts %>%
## group by the region
group_by_key() %>%
## for each group add rows from the highest epiweek to the end of year
group_modify(~add_row(.,
epiweek = seq(max(.$epiweek) + 1,
end_date,
by = 1)))
library(readxl) # loads readxl library
campylobacter_germany <- read_excel("R_training/14_Mar_2024/campylobacter_germany.xlsx")
View(campylobacter_germany)
campylobacter_germany <- read_excel("R_training/14_Mar_2024/campylobacter_germany.xlsx")
setwd("~/R_training/14_Mar_2024")
library(readxl) # loads readxl library
setwd("~/R_training/14_Mar_2024")
library(readxl) # loads readxl library
df_init <- read_excel("R_training/14_Mar_2024/campylobacter_germany.xlsx")
setwd("~/R_training/14_Mar_2024")
library(readxl) # loads readxl library
df_init <- read_excel("campylobacter_germany.xlsx")
View(df_init)
typeof(df_init)
typeof(df_init$date)
typeof(df_init$date)
typeof(df_init$case)
typeof(df_init$date)
typeof(df_init$case)
as.Date(df_init$date)
typeof(df_init$date)
typeof(df_init$case)
df_init <- as.Date(df_init$date)
setwd("~/R_training/14_Mar_2024")
library(readxl) # loads readxl library
df_init <- read_excel("campylobacter_germany.xlsx")
View(df_init)
typeof(df_init$date)
typeof(df_init$case)
df_init$date <- as.Date(df_init$date)
View(df_init)
library(tidyverse)
yearweek()
library(tsibble)
help(yearweek)
yearweek(df_init$date)
yearweek(df_init$date,1)
yearweek(df_init$date,2)
yearweek(df_init$date,1)
df_init$yearweek <- yearweek(df_init$date,1)
tsibble(df_init,index = yearweek)
df_ts <- tsibble(df_init,index = yearweek)
library(ggplot2)
ggplot(df_ts) +
geom_line(aes(x=yearweek,y=case))
str_detect(df_ts)
str_detect(df_ts,"W51")
str_detect(df_ts,"W51|W52")
str_detect(df_ts,"W51|W52|W53")
str_detect(df_ts$yearweek,"W51|W52|W53")
str_detect(df_ts$yearweek,"W51|W52|W53|W01|W02")
df_ts$to_be_imputed <- str_detect(df_ts$yearweek,"W51|W52|W53|W01|W02")
View(df_ts)
mutate(df_ts$case=if_else(df_ts$to_be_imputed,NA,df_ts$case))
df_ts %>% mutate(case=if_else(to_be_imputed,NA,case))
df_ts %<>% mutate(case=if_else(to_be_imputed,NA,case))
df_ts <- df_ts %>% mutate(case=if_else(to_be_imputed,NA,case))
View(df_ts)
imputeTS::na_interpolation(df_ts$case)
df_ts$case <- imputeTS::na_interpolation(df_ts$case)
ggplot(df_ts) +
geom_line(aes(x=yearweek,y=case))
library(slider)
a <- c(0,1,2,3,4,5,6)
slider::slide(a,mean(.x))
slider::slide(a,mean(.a))
slider::slide(a,mean
slider::slide(a,mean)
slider::slide_dbl(a,mean)
slider::slide_dbl(a,mean,.before=3)
slider::slide_dbl(a,mean,.before=2)
slider::slide_dbl(a,mean,.before=2,.after=2)
slider::slide_dbl(df_ts$case,mean,.before=2)
df_ts$ma <- slider::slide_dbl(df_ts$case,mean,.before=2)
ggplot(df_ts) +
geom_line(aes(x=yearweek,y=case))
ggplot(df_ts) +
geom_line(aes(x=yearweek,y=ma))
df_ts$ma <- slider::slide_dbl(df_ts$case,mean,.before=4)
ggplot(df_ts) +
geom_line(aes(x=yearweek,y=ma))
df_ts$case - df_ts$ma
df_ts$noise <- df_ts$case - df_ts$ma
ggplot(df_ts) +
geom_line(aes(x=yearweek,y=noise))
df_ts$ma <- slider::slide_dbl(df_ts$case,mean,.before=2)
ggplot(df_ts) +
geom_line(aes(x=yearweek,y=ma))
ggplot(df_ts) +
geom_line(aes(x=yearweek,y=noise))
df_ts$noise <- df_ts$case - df_ts$ma
ggplot(df_ts) +
geom_line(aes(x=yearweek,y=noise))
df_ts$ma <- slider::slide_dbl(df_ts$case,mean,.before=0)
ggplot(df_ts) +
geom_line(aes(x=yearweek,y=ma))
df_ts$noise <- df_ts$case - df_ts$ma
ggplot(df_ts) +
geom_line(aes(x=yearweek,y=noise))
df_ts$ma <- slider::slide_dbl(df_ts$case,mean,.before=6)
df_ts$ma <- slider::slide_dbl(df_ts$case,mean,.before=6)
ggplot(df_ts) +
geom_line(aes(x=yearweek,y=ma))
ggplot(df_ts) +
geom_line(aes(x=yearweek,y=noise))
df_ts$noise <- df_ts$case - df_ts$ma
ggplot(df_ts) +
geom_line(aes(x=yearweek,y=noise))
}
# Define function
periodogram <- function(x,
counts,
start_week = c(2002, 1),
period = 52,
output = "weeks") {
## make sure is not a tsibble, filter to project and only keep columns of interest
prepare_data <- dplyr::as_tibble(x)
# prepare_data <- prepare_data[prepare_data[[strata]] == j, ]
prepare_data <- dplyr::select(prepare_data, {{counts}})
## create an intermediate "zoo" time series to be able to use with spec.pgram
zoo_cases <- zoo::zooreg(prepare_data,
start = start_week, frequency = period)
## get a spectral periodogram not using fast fourier transform
periodo <- spec.pgram(zoo_cases, fast = FALSE, plot = FALSE)
## return the peak weeks
periodo_weeks <- 1 / periodo$freq[order(-periodo$spec)] * period
if (output == "weeks") {
periodo_weeks
} else {
periodo
}
}
periodo <- periodogram(counts,
case_int,
start_week = c(2002, 1),
output = "periodogram")
# Define function
periodogram <- function(x,
counts,
start_week = c(2002, 1),
period = 52,
output = "weeks") {
## make sure is not a tsibble, filter to project and only keep columns of interest
prepare_data <- dplyr::as_tibble(x)
# prepare_data <- prepare_data[prepare_data[[strata]] == j, ]
prepare_data <- dplyr::select(prepare_data, {{counts}})
## create an intermediate "zoo" time series to be able to use with spec.pgram
zoo_cases <- zoo::zooreg(prepare_data,
start = start_week, frequency = period)
## get a spectral periodogram not using fast fourier transform
periodo <- spec.pgram(zoo_cases, fast = FALSE, plot = FALSE)
## return the peak weeks
periodo_weeks <- 1 / periodo$freq[order(-periodo$spec)] * period
if (output == "weeks") {
periodo_weeks
} else {
periodo
}
}
periodo <- periodogram(df_ts,
case,
start_week = c(2002, 1),
output = "periodogram")
## pull spectrum and frequence in to a dataframe for plotting
periodo <- data.frame(periodo$freq, periodo$spec)
## plot a periodogram showing the most frequently occuring periodicity
ggplot(data = periodo,
aes(x = 1/(periodo.freq/52),  y = log(periodo.spec))) +
geom_line() +
labs(x = "Period (Weeks)", y = "Log(density)")
periodo <- periodogram(df_ts,
noise,
start_week = c(2002, 1),
output = "periodogram")
# Define function
periodogram <- function(x,
counts,
start_week = c(2002, 1),
period = 52,
output = "weeks") {
## make sure is not a tsibble, filter to project and only keep columns of interest
prepare_data <- dplyr::as_tibble(x)
# prepare_data <- prepare_data[prepare_data[[strata]] == j, ]
prepare_data <- dplyr::select(prepare_data, {{counts}})
## create an intermediate "zoo" time series to be able to use with spec.pgram
zoo_cases <- zoo::zooreg(prepare_data,
start = start_week, frequency = period)
## get a spectral periodogram not using fast fourier transform
periodo <- spec.pgram(zoo_cases, fast = FALSE, plot = FALSE)
## return the peak weeks
periodo_weeks <- 1 / periodo$freq[order(-periodo$spec)] * period
if (output == "weeks") {
periodo_weeks
} else {
periodo
}
}
periodo <- periodogram(df_ts,
noise,
start_week = c(2002, 1),
output = "periodogram")
## pull spectrum and frequence in to a dataframe for plotting
periodo <- data.frame(periodo$freq, periodo$spec)
## plot a periodogram showing the most frequently occuring periodicity
ggplot(data = periodo,
aes(x = 1/(periodo.freq/52),  y = log(periodo.spec))) +
geom_line() +
labs(x = "Period (Weeks)", y = "Log(density)")
df_ts$ma <- slider::slide_dbl(df_ts$case,mean,.before=2)
ggplot(df_ts) +
geom_line(aes(x=yearweek,y=ma))
df_ts$noise <- df_ts$case - df_ts$ma
ggplot(df_ts) +
geom_line(aes(x=yearweek,y=noise))
df_ts$noise <- df_ts$case - df_ts$ma
ggplot(df_ts) +
geom_line(aes(x=yearweek,y=noise))
# Define function
periodogram <- function(x,
counts,
start_week = c(2002, 1),
period = 52,
output = "weeks") {
## make sure is not a tsibble, filter to project and only keep columns of interest
prepare_data <- dplyr::as_tibble(x)
# prepare_data <- prepare_data[prepare_data[[strata]] == j, ]
prepare_data <- dplyr::select(prepare_data, {{counts}})
## create an intermediate "zoo" time series to be able to use with spec.pgram
zoo_cases <- zoo::zooreg(prepare_data,
start = start_week, frequency = period)
## get a spectral periodogram not using fast fourier transform
periodo <- spec.pgram(zoo_cases, fast = FALSE, plot = FALSE)
## return the peak weeks
periodo_weeks <- 1 / periodo$freq[order(-periodo$spec)] * period
if (output == "weeks") {
periodo_weeks
} else {
periodo
}
}
periodo <- periodogram(df_ts,
noise,
start_week = c(2002, 1),
output = "periodogram")
## pull spectrum and frequence in to a dataframe for plotting
periodo <- data.frame(periodo$freq, periodo$spec)
## plot a periodogram showing the most frequently occuring periodicity
ggplot(data = periodo,
aes(x = 1/(periodo.freq/52),  y = log(periodo.spec))) +
geom_line() +
labs(x = "Period (Weeks)", y = "Log(density)")
df_ts$ma <- slider::slide_dbl(df_ts$case,mean,.before=1)
df_ts$ma <- slider::slide_dbl(df_ts$case,mean,.before=1)
ggplot(df_ts) +
geom_line(aes(x=yearweek,y=ma))
df_ts$noise <- df_ts$case - df_ts$ma
ggplot(df_ts) +
geom_line(aes(x=yearweek,y=noise))
# Define function
periodogram <- function(x,
counts,
start_week = c(2002, 1),
period = 52,
output = "weeks") {
## make sure is not a tsibble, filter to project and only keep columns of interest
prepare_data <- dplyr::as_tibble(x)
# prepare_data <- prepare_data[prepare_data[[strata]] == j, ]
prepare_data <- dplyr::select(prepare_data, {{counts}})
## create an intermediate "zoo" time series to be able to use with spec.pgram
zoo_cases <- zoo::zooreg(prepare_data,
start = start_week, frequency = period)
## get a spectral periodogram not using fast fourier transform
periodo <- spec.pgram(zoo_cases, fast = FALSE, plot = FALSE)
## return the peak weeks
periodo_weeks <- 1 / periodo$freq[order(-periodo$spec)] * period
if (output == "weeks") {
periodo_weeks
} else {
periodo
}
}
periodo <- periodogram(df_ts,
noise,
start_week = c(2002, 1),
output = "periodogram")
## pull spectrum and frequence in to a dataframe for plotting
periodo <- data.frame(periodo$freq, periodo$spec)
## plot a periodogram showing the most frequently occuring periodicity
ggplot(data = periodo,
aes(x = 1/(periodo.freq/52),  y = log(periodo.spec))) +
geom_line() +
labs(x = "Period (Weeks)", y = "Log(density)")
df_ts$ma <- slider::slide_dbl(df_ts$case,mean,.before=0)
ggplot(df_ts) +
geom_line(aes(x=yearweek,y=ma))
df_ts$noise <- df_ts$case - df_ts$ma
ggplot(df_ts) +
geom_line(aes(x=yearweek,y=noise))
df_ts$noise <- df_ts$case - df_ts$ma
ggplot(df_ts) +
geom_line(aes(x=yearweek,y=noise))
# Define function
periodogram <- function(x,
counts,
start_week = c(2002, 1),
period = 52,
output = "weeks") {
## make sure is not a tsibble, filter to project and only keep columns of interest
prepare_data <- dplyr::as_tibble(x)
# prepare_data <- prepare_data[prepare_data[[strata]] == j, ]
prepare_data <- dplyr::select(prepare_data, {{counts}})
## create an intermediate "zoo" time series to be able to use with spec.pgram
zoo_cases <- zoo::zooreg(prepare_data,
start = start_week, frequency = period)
## get a spectral periodogram not using fast fourier transform
periodo <- spec.pgram(zoo_cases, fast = FALSE, plot = FALSE)
## return the peak weeks
periodo_weeks <- 1 / periodo$freq[order(-periodo$spec)] * period
if (output == "weeks") {
periodo_weeks
} else {
periodo
}
}
periodo <- periodogram(df_ts,
noise,
start_week = c(2002, 1),
output = "periodogram")
## pull spectrum and frequence in to a dataframe for plotting
periodo <- data.frame(periodo$freq, periodo$spec)
## plot a periodogram showing the most frequently occuring periodicity
ggplot(data = periodo,
aes(x = 1/(periodo.freq/52),  y = log(periodo.spec))) +
geom_line() +
labs(x = "Period (Weeks)", y = "Log(density)")
pacman::p_load(feasts)
## decompose the counts dataset
counts %>%
# using an additive classical decomposition model
model(classical_decomposition(case_int, type = "additive")) %>%
## extract the important information from the model
components() %>%
## generate a plot
autoplot()
pacman::p_load(feasts)
## decompose the counts dataset
df_ts %>%
# using an additive classical decomposition model
model(classical_decomposition(case_int, type = "additive")) %>%
## extract the important information from the model
components() %>%
## generate a plot
autoplot()
pacman::p_load(feasts)
## decompose the counts dataset
df_ts %>%
# using an additive classical decomposition model
model(classical_decomposition(case, type = "additive")) %>%
## extract the important information from the model
components() %>%
## generate a plot
autoplot()
pacman::p_load(forecast,trending)
## add in fourier terms using the epiweek and case_int variabless
df_ts$fourier <- select(df_ts, epiweek, case) %>%
fourier(K = 1)
pacman::p_load(forecast,trending)
## add in fourier terms using the epiweek and case_int variabless
df_ts$fourier <- select(df_ts, epiweek, case) %>%
fourier(K = 1)
pacman::p_load(forecast,trending)
## add in fourier terms using the epiweek and case_int variabless
df_ts$fourier <- select(df_ts, epiweek, case) %>%
fourier(K = 1)
pacman::p_load(forecast,trending)
## add in fourier terms using the epiweek and case_int variabless
df_ts$fourier <- select(counts, epiweek, case_int) %>%
fourier(K = 1)
pacman::p_load(forecast,trending)
## add in fourier terms using the epiweek and case_int variabless
df_ts$fourier <- select(df_ts, epiweek, case_int) %>%
fourier(K = 1)
