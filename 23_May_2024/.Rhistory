female_linelist.dropna()
dropna(female_linelist)
drop_na(female_linelist)
library(tidyverse)
drop_na(female_linelist$outcome)
is.na(female_linelist$outcome)
drop.na(female_linelist$outcome)
drop_na(female_linelist$outcome)
is.na(female_linelist$outcome)
~is.na(female_linelist$outcome)
~is.na(female_linelist$outcome)
!is.na(female_linelist$outcome)
female_linelist[!is.na(female_linelist$outcome),]
idx <- linelist_cleaned$outcome == 'Death'
male_linelist <- linelist_cleaned[idx,]
male_linelist <- male_linelist[!is.na(male_linelist$outcome),]
idx <- linelist_cleaned$outcome == 'Recover'
female_linelist <- linelist_cleaned[idx,]
female_linelist <- female_linelist[!is.na(female_linelist$outcome),]
library(ggplot2)
ggplot() + geom_histogram(data=female_linelist,aes(x=age_years),color='red',fill='white',alpha=0.1,bins=50)+ geom_histogram(data=male_linelist,aes(x=age_years),color='blue',fill='white',alpha=0.1,bins=50)
# Testing whether two sampling distributions are the same
# Wilcoxon Rank Sum Test
idx <- linelist_cleaned$outcome == 'Death'
male_linelist <- linelist_cleaned[idx,]
idx <- linelist_cleaned$outcome == 'Recover'
female_linelist <- linelist_cleaned[idx,]
library(ggplot2)
ggplot() + geom_histogram(data=female_linelist,aes(x=age_years),color='red',fill='white',alpha=0.1,bins=50)+ geom_histogram(data=male_linelist,aes(x=age_years),color='blue',fill='white',alpha=0.1,bins=50)
View(linelist_cleaned)
table(linelist_cleaned$outcome)
table(female_linelist$outcome)
table(male_linelist$outcome)
# Chi-square
# gender ~ outcome
chisq.test(linelist_cleaned$outcome,linelist$outcome)
# Chi-square
# gender ~ outcome
chisq.test(linelist_cleaned$outcome,linelist_cleaned$gender)
help("chisq.test")
# Chi-square
# gender ~ outcome
Xsq = chisq.test(linelist_cleaned$outcome,linelist_cleaned$gender)
Xsq$observed
Xsq
Xsq$expected
Xsq$residuals
Xsq$stdres
reticulate::repl_python()
yes
Yes
reticulate::repl_python()
reticulate::repl_python()
reticulate::repl_python()
install.packages('devtools')
devtools::install_github('HopkinsIDD/phylosamp')
pacman::p_load(
rio,             # import/export
here,            # relative file paths
tidyverse,       # general data management and visualization
ape,             # to import and export phylogenetic files
ggtree,          # to visualize phylogenetic files
treeio,          # to visualize phylogenetic files
ggnewscale)      # to add additional layers of color schemes
tree <- ape::read.tree("export.newick")
tree <- ape::read.tree("export.newick")
tree
ggtree(tree)
pacman::p_load(
rio,             # import/export
here,            # relative file paths
tidyverse,       # general data management and visualization
ape,             # to import and export phylogenetic files
ggtree,          # to visualize phylogenetic files
treeio,          # to visualize phylogenetic files
ggnewscale)      # to add additional layers of color schemes
install.Packages(BiocManager)
install.packages(BiocManager)
install.packages("BiocManager")
pacman::p_load(
rio,             # import/export
here,            # relative file paths
tidyverse,       # general data management and visualization
ape,             # to import and export phylogenetic files
ggtree,          # to visualize phylogenetic files
treeio,          # to visualize phylogenetic files
ggnewscale)      # to add additional layers of color schemes
tree <- ape::read.tree("export.newick")
tree
ggtree(tree)
ggtree(tree,  branch.length = "none")                   # simple linear tree with all tips aligned
ggtree(tree, layout="circular")                         # simple circular tree
ggtree(tree, layout="circular", branch.length = "none") # simple circular tree with all tips aligned
ggtree(tree, layout="circular", branch.length = "none") # simple circular tree with all tips aligned
tree <- ape::read.tree("export (1).newick")
ggtree(tree)
ggtree(tree,  branch.length = "none")                   # simple linear tree with all tips aligned
ggtree(tree, layout="circular")                         # simple circular tree
#remotes::install_github("reconverse/reportfactory") # alternative
```
# Install and load the latest version of the package from Github
pacman::p_load_current_gh("reconverse/reportfactory")
new_factory()
ggplot(data=linelist_cleaned) + geom_histogram(wt_kg)
library(ggplot2)
ggplot(data=linelist_cleaned) + geom_histogram(x=wt_kg)
linelist_cleaned <- read_excel("dev/R_training/reports/linelist_cleaned.xlsx")
library(ggplot2)
ggplot(data=linelist_cleaned) + geom_histogram(x=wt_kg)
library(readxl)
linelist_cleaned <- read_excel("dev/R_training/reports/linelist_cleaned.xlsx")
library(ggplot2)
ggplot(data=linelist_cleaned) + geom_histogram(x=wt_kg)
library(readxl)
linelist_cleaned <- read_excel("dev/R_training/reports/linelist_cleaned.xlsx")
linelist_cleaned <- read_excel("linelist_cleaned.xlsx")
library(ggplot2)
ggplot(data=linelist_cleaned) + geom_histogram(x=wt_kg)
View(linelist_cleaned)
ggplot(data=linelist_cleaned) + geom_histogram(aes(x=wt_kg))
summary(linelist_cleaned)
summary(linelist_cleaned)
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(dplyr)
library(readxl)
# Load the data
linelist_data <- read_excel("linelist_cleaned.xlsx")
# Convert date columns to Date format
date_columns <- c('date_infection', 'date_onset', 'date_hospitalisation', 'date_outcome')
linelist_data[date_columns] <- lapply(linelist_data[date_columns], as.Date)
# Preview the data
head(linelist_data)
ggplot(linelist_data, aes(x = age)) +
geom_histogram(binwidth = 5, fill = 'skyblue', color = 'black') +
labs(title = 'Age Distribution of Cases', x = 'Age', y = 'Frequency') +
theme_minimal()
ggplot(linelist_data, aes(x = date_onset)) +
geom_histogram(binwidth = 1, fill = 'orange', color = 'black') +
labs(title = 'Epidemic Curve', x = 'Date of Onset', y = 'Number of Cases') +
theme_minimal()
ggplot(linelist_data, aes(x = gender)) +
geom_bar(fill = 'lightgreen', color = 'black') +
labs(title = 'Gender Distribution of Cases', x = 'Gender', y = 'Count') +
theme_minimal()
symptoms <- linelist_data %>%
select(fever, cough, chills, aches, vomit) %>%
gather(key = "symptom", value = "presence") %>%
filter(presence == "yes")
symptoms <- linelist_data %>%
select(fever, cough, chills, aches, vomit) %>%
gather(key = "symptom", value = "presence") %>%
filter(presence == "yes")
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(dplyr)
library(readxl)
library(tidyr)
# Load the data
linelist_data <- read_excel("linelist_cleaned.xlsx")
# Convert date columns to Date format
date_columns <- c('date_infection', 'date_onset', 'date_hospitalisation', 'date_outcome')
linelist_data[date_columns] <- lapply(linelist_data[date_columns], as.Date)
# Preview the data
head(linelist_data)
# Load the data
linelist_data <- read_excel("linelist_cleaned.xlsx")
# Convert date columns to Date format
date_columns <- c('date_infection', 'date_onset', 'date_hospitalisation', 'date_outcome')
linelist_data[date_columns] <- lapply(linelist_data[date_columns], as.Date)
# Preview the data
head(linelist_data)
# Load the data
linelist_data <- read_excel("linelist_cleaned.xlsx")
# Convert date columns to Date format
date_columns <- c('date_infection', 'date_onset', 'date_hospitalisation', 'date_outcome')
linelist_data[date_columns] <- lapply(linelist_data[date_columns], as.Date)
# Preview the data
head(linelist_data)
ggplot(linelist_data, aes(x = age)) +
geom_histogram(binwidth = 5, fill = 'skyblue', color = 'black') +
labs(title = 'Age Distribution of Cases', x = 'Age', y = 'Frequency') +
theme_minimal()
ggplot(linelist_data, aes(x = date_onset)) +
geom_histogram(binwidth = 1, fill = 'orange', color = 'black') +
labs(title = 'Epidemic Curve', x = 'Date of Onset', y = 'Number of Cases') +
theme_minimal()
ggplot(linelist_data, aes(x = gender)) +
geom_bar(fill = 'lightgreen', color = 'black') +
labs(title = 'Gender Distribution of Cases', x = 'Gender', y = 'Count') +
theme_minimal()
symptoms <- linelist_data %>%
select(fever, cough, chills, aches, vomit) %>%
gather(key = "symptom", value = "presence") %>%
filter(presence == "yes")
ggplot(symptoms, aes(x = symptom)) +
geom_bar(fill = 'purple', color = 'black') +
labs(title = 'Symptom Analysis', x = 'Symptom', y = 'Count') +
theme_minimal()
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(dplyr)
library(readxl)
library(tidyr)
library(sf)
library(ggmap)
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(dplyr)
library(readxl)
library(tidyr)
library(sf)
library(ggmap)
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(dplyr)
library(readxl)
library(tidyr)
library(sf)
library(ggmap)
p_load(ggmap)
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(dplyr)
library(readxl)
library(tidyr)
library(sf)
p_load(ggmap)
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(dplyr)
library(readxl)
library(tidyr)
library(sf)
pacman::p_load(ggmap)
# Load the data
linelist_data <- read_excel("linelist_cleaned.xlsx")
# Convert date columns to Date format
date_columns <- c('date_infection', 'date_onset', 'date_hospitalisation', 'date_outcome')
linelist_data[date_columns] <- lapply(linelist_data[date_columns], as.Date)
# Preview the data
head(linelist_data)
# Assuming the dataset has 'latitude' and 'longitude' columns
if("latitude" %in% colnames(linelist_data) & "longitude" %in% colnames(linelist_data)) {
# Convert to sf object for spatial plotting
linelist_data_sf <- st_as_sf(linelist_data, coords = c("longitude", "latitude"), crs = 4326, remove = FALSE)
# Plot the geographic distribution
ggplot(data = linelist_data_sf) +
geom_sf(aes(geometry = geometry), color = 'red', size = 2) +
labs(title = 'Geographic Distribution of Cases') +
theme_minimal()
} else {
print("Geographic data (latitude and longitude) not available in the dataset.")
}
# Assuming the dataset has 'latitude' and 'longitude' columns
if("latitude" %in% colnames(linelist_data) & "longitude" %in% colnames(linelist_data)) {
# Convert to sf object for spatial plotting
linelist_data_sf <- st_as_sf(linelist_data, coords = c("longitude", "latitude"), crs = 4326, remove = FALSE)
# Plot the geographic distribution
ggplot(data = linelist_data_sf) +
geom_sf(aes(geometry = geometry), color = 'red', size = 2) +
labs(title = 'Geographic Distribution of Cases') +
theme_minimal()
} else {
print("Geographic data (latitude and longitude) not available in the dataset.")
}
# Assuming the dataset has 'latitude' and 'longitude' columns
if("lat" %in% colnames(linelist_data) & "lon" %in% colnames(linelist_data)) {
# Convert to sf object for spatial plotting
linelist_data_sf <- st_as_sf(linelist_data, coords = c("lon", "lat"), crs = 4326, remove = FALSE)
# Plot the geographic distribution
ggplot(data = linelist_data_sf) +
geom_sf(aes(geometry = geometry), color = 'red', size = 2) +
labs(title = 'Geographic Distribution of Cases') +
theme_minimal()
} else {
print("Geographic data (latitude and longitude) not available in the dataset.")
}
less18 <- linelist_cleaned %>%
filter(age <= 18) %>% nrow()
total <- linelist_cleaned %>% filter(!is.na(age)) %>% nrow()
less18prop <- round(less18/total*100,1)
# Load necessary libraries
library(ggplot2)
library(dplyr)
library(readxl)
library(tidyr)
library(sf)
library(ggmap)
# Load the data
linelist_data <- read_excel("linelist_cleaned.xlsx")
less18 <- linelist_data %>%
filter(age <= 18) %>% nrow()
total <- linelist_data %>% filter(!is.na(age)) %>% nrow()
less18prop <- round(less18/total*100,1)
# Load necessary libraries
library(ggplot2)
library(dplyr)
library(readxl)
library(tidyr)
library(sf)
library(ggmap)
library(lubridate)
# Load the data
linelist_data <- read_excel("linelist_cleaned.xlsx")
# Convert date columns to Date format
date_columns <- c('date_infection', 'date_onset', 'date_hospitalisation', 'date_outcome')
linelist_data[date_columns] <- lapply(linelist_data[date_columns], as.Date)
# Preview the data
head(linelist_data)
# Calculate additional metrics
linelist_data <- linelist_data %>%
mutate(
days_onset_hosp = as.numeric(date_hospitalisation - date_onset),
days_hosp_outcome = as.numeric(date_outcome - date_hospitalisation)
)
# Age Distribution
ggplot(linelist_data, aes(x = age)) +
geom_histogram(binwidth = 5, fill = 'skyblue', color = 'black') +
labs(title = 'Age Distribution of Cases', x = 'Age', y = 'Frequency') +
theme_minimal()
View(linelist_data)
pacman::p_load(ggplot2,rio)
rio::import('linelist_cleaned.xlsx')
rio::import('linelist_cleaned.xlsx') %>% filter(hospital=params$hospital)
rio::import('linelist_cleaned.xlsx') %>% filter(hospital==params$hospital)
linelist_hospital <- rio::import('linelist_cleaned.xlsx') %>% filter(hospital==params$hospital)
```{r data}
linelist_hospital <- rio::import('linelist_cleaned.xlsx') %>% filter(hospital==params$hospital)
linelist_hospital <- rio::import('linelist_cleaned.xlsx') %>% filter(hospital==params$hospital)
pacman::p_load(ggplot2,rio,dplyr)
linelist_hospital <- rio::import('linelist_cleaned.xlsx') %>% filter(hospital==params$hospital)
mean(linelist_hospital$age,drop.na=TRUE)
linelist_hospital$age
mean(linelist_hospital$age)
mean(linelist_hospital$age,na.rm=TRUE)
library(tidyr)
# Symptoms Analysis
symptoms <- linelist_hospital %>%
select(fever, cough, chills, aches, vomit) %>%
pivot_longer(cols = everything(), names_to = "symptom", values_to = "presence") %>%
filter(presence == "yes")
ggplot(symptoms, aes(x = symptom)) +
geom_bar(fill = 'purple', color = 'black') +
labs(title = 'Symptom Analysis', x = 'Symptom', y = 'Count') +
theme_minimal()
print("hello")
library(readxl)
setwd("~/dev/R_training/reports")
library(readxl)
linelist_cleaned <- read_excel("linelist_cleaned.xlsx")
View(linelist_cleaned)
df <- read_excel("linelist_cleaned.xlsx")
library(readxl)
df <- read_excel("linelist_cleaned.xlsx")
df
df$age
NA
NA < 18
NA < 18
NA >= 18
df$age
df$age < 18
0 == FALSE
1 == FALSE
1 == TRUE
sum(df$age < 18)
help(sum)
sum(df$age < 18,na.rm=TRUE)
df$age
is.na(df$age)
!is.na(df$age)
sum(!is.na(df$age))
nrow(df$age)
sum(df$age < 18,na.rm=TRUE) / sum(!is.na(df$age))
sum(df$age <= 18,na.rm=TRUE) / sum(!is.na(df$age))
sum(df$age < 18,na.rm=TRUE) / sum(!is.na(df$age))
(sum(df$age < 18,na.rm=TRUE) / sum(!is.na(df$age)))*100
(sum(df$age < 18,na.rm=TRUE) / sum(!is.na(df$age)))*100
"this is text"
prop_lt_18 <- (sum(df$age < 18,na.rm=TRUE) / sum(!is.na(df$age)))*100
"this is text prop_lt_18"
"this is text {prop_lt_18}"
"this is text ${prop_lt_18}"
`this is text ${prop_lt_18}`
`this is text prop_lt_18`
```
prop_lt_18 <- (sum(df$age < 18,na.rm=TRUE) / sum(!is.na(df$age)))*100
```
prop_lt_18 <- (sum(df$age < 18,na.rm=TRUE) / sum(!is.na(df$age)))*100
prop_lt_18
prop_lt_18
prop_lt_18
prop_lt_18
round(prop_lt_18,digits=2)
prop_lt_18 <- (sum(df$age < 18,na.rm=TRUE) / sum(!is.na(df$age)))*100
round(prop_lt_18,digits=2)
prop_lt_18 <- (n_lt_18 / total)*100
n_lt_18 <- sum(df$age < 18,na.rm=TRUE)
total <- sum(!is.na(df$age))
prop_lt_18 <- (n_lt_18 / total)*100
df
library(tidyr)
View(df)
df %>% filter(hospital=="Central Hospital")
df <- read_excel("linelist_cleaned.xlsx")
df %>% filter(hospital=="Central Hospital")
df <- read_excel("linelist_cleaned.xlsx")
df %>% filter(hospital=="Central Hospital")
library(dplyr)
df %>% filter(hospital=="Central Hospital")
df <- df %>% filter(hospital=="Central Hospital")
library(readxl)
library(dplyr)
df <- read_excel("linelist_cleaned.xlsx")
df <- df %>% filter(hospital=="Central Hospital")
df <- read_excel("linelist_cleaned.xlsx")
df <- df %>% filter(hospital=="Central Hospital")
library(readxl)
library(dplyr)
df <- read_excel("linelist_cleaned.xlsx")
df <- df %>% filter(hospital=="Central Hospital")
library(readxl)
library(dplyr)
df <- read_excel("linelist_cleaned.xlsx")
df <- df %>% filter(hospital=="Central Hospital")
ggplot(data=df) + geom_histogram(mapping=aes(x=age))
library(ggplot2)
ggplot(data=df) + geom_histogram(mapping=aes(x=age))
ggplot(data=df) + geom_histogram(mapping=aes(x=age),binwidth=5)
ggplot(data=df) + geom_histogram(mapping=aes(x=age),binwidth=5,fill='skyblue')
ggplot(data=df) + geom_histogram(mapping=aes(x=age),binwidth=5,fill='skyblue',color='black')
+ labs(title='Age Distribution of Cases)
ggplot(data=df) + geom_histogram(mapping=aes(x=age),binwidth=5,fill='skyblue',color='black') + labs(title='Age Distribution of Cases)
ggplot(data=df) + geom_histogram(mapping=aes(x=age),binwidth=5,fill='skyblue',color='black') + labs(title='Age Distribution of Cases')
ggplot(data=df) + geom_histogram(mapping=aes(x=age),binwidth=5,fill='skyblue',color='black') + labs(title='Age Distribution of Cases',x='Age',y='Frequency')
ggplot(data=df) + geom_histogram(mapping=aes(x=age),binwidth=5,fill='skyblue',color='black') + labs(title='Age Distribution of Cases',x='Age',y='Frequency') + theme_minimal()
df <- read_excel("linelist_cleaned.xlsx")
n_lt_18 <- sum(df$age < 18,na.rm=TRUE)
total <- sum(!is.na(df$age))
prop_lt_18 <- (n_lt_18 / total)*100
library(ggplot2)
ggplot(data=df) + geom_histogram(mapping=aes(x=age),binwidth=5,fill='skyblue',color='black') + labs(title='Age Distribution of Cases',x='Age',y='Frequency') + theme_minimal()
# Epidemic Curve
ggplot(df, aes(x = date_onset)) +
geom_histogram(binwidth = 1, fill = 'orange', color = 'black') +
labs(title = 'Epidemic Curve', x = 'Date of Onset', y = 'Number of Cases') +
theme_minimal()
# Symptoms Analysis
symptoms <- df %>%
select(fever, cough, chills, aches, vomit) %>%
pivot_longer(cols = everything(), names_to = "symptom", values_to = "presence") %>%
filter(presence == "yes")
ggplot(symptoms, aes(x = symptom)) +
geom_bar(fill = 'purple', color = 'black') +
labs(title = 'Symptom Analysis', x = 'Symptom', y = 'Count') +
theme_minimal()
# Symptoms Analysis
symptoms <- df %>%
select(fever, cough, chills, aches, vomit) %>%
pivot_longer(cols = everything(), names_to = "symptom", values_to = "presence") %>%
filter(presence == "yes")
ggplot(symptoms, aes(x = symptom)) +
geom_bar(fill = 'purple', color = 'black') +
labs(title = 'Symptom Analysis', x = 'Symptom', y = 'Count') +
theme_minimal()
library(readxl)
library(dplyr)
df <- read_excel("linelist_cleaned.xlsx")
df <- df %>% filter(hospital==params$hospital)
n_lt_18 <- sum(df$age < 18,na.rm=TRUE)
total <- sum(!is.na(df$age))
prop_lt_18 <- (n_lt_18 / total)*100
library(ggplot2)
ggplot(data=df) + geom_histogram(mapping=aes(x=age),binwidth=5,fill='skyblue',color='black') + labs(title='Age Distribution of Cases',x='Age',y='Frequency') + theme_minimal()
# Symptoms Analysis
symptoms <- df %>%
select(fever, cough, chills, aches, vomit) %>%
pivot_longer(cols = everything(), names_to = "symptom", values_to = "presence") %>%
filter(presence == "yes")
ggplot(symptoms, aes(x = symptom)) +
geom_bar(fill = 'purple', color = 'black') +
labs(title = 'Symptom Analysis', x = 'Symptom', y = 'Count') +
theme_minimal()
library(readxl)
library(dplyr)
library(tidyr)
df <- read_excel("linelist_cleaned.xlsx")
df <- df %>% filter(hospital==params$hospital)
rmarkdown::render(input="report.Rmd")
rmarkdown::render(input="report.Rmd",output_file = "{Sys.Date()}")
rmarkdown::render(input="report.Rmd",output_file = "`{Sys.Date()}`")
rmarkdown::render(input="report.Rmd",output_file = "`r Sys.Date()`")
rmarkdown::render(input="report.Rmd",output_file = `r Sys.Date()`)
rmarkdown::render(input="report.Rmd",output_file = stringr::str_glue("{Sys.Date()}")
rmarkdown::render(input="report.Rmd",output_file = stringr::str_glue("{Sys.Date()}")
rmarkdown::render(input="report.Rmd",output_file = stringr::str_glue("{Sys.Date()}"))
rmarkdown::render(input="report.Rmd",output_file = stringr::str_glue("report_{Sys.Date()}"))
rmarkdown::render(input="report.Rmd",output_file = stringr::str_glue("report_{Sys.Date()}"),params=list(hospital="Central Hospital"))
rmarkdown::render(input="report.Rmd",output_file = stringr::str_glue("report_{Sys.Date()}"),params=list(hospital="Central Hospital"))
hospital <- "Central Hospital"
rmarkdown::render(input="report.Rmd",output_file = stringr::str_glue("report_{Sys.Date()}"),params=list(hospital=hospital))
rmarkdown::render(input="report.Rmd",output_file = stringr::str_glue("report_{hospital}_{Sys.Date()}"),params=list(hospital=hospital))
hospitals <- c("Central Hospital","Military Hospital")
for (i in 1:length(hospitals)) {
hospital <- hospitals[i]
rmarkdown::render(
input="report.Rmd",
output_file = stringr::str_glue("report_{hospital}_{Sys.Date()}"),
params=list(hospital=hospital)
)
}
